#LyX 1.6.0 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\use_default_options false
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Lift Architecture
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This chapter will walk you through Lift's architecture and how it processes
 requests.
 During the explanation of the rendering pipeline, you'll see how you can
 add your own code to be a part of that processing.
 
\end_layout

\begin_layout Section
Entry into Lift
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Todo:
\end_layout

\begin_layout Plain Layout
- We need a high level summary of section 4.5
\end_layout

\begin_layout Plain Layout
- Fix up references
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first step in Lift's request processing is intercepting the HTTP request.
 Originally, Lift used a Servlet instance to process incoming requests.
 This was changed to use a Filter instance
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://groups.google.com/group/liftweb/browse_thread/thread/b484ea2a13b6f84b/90ba1
ef1115055a6
\end_layout

\end_inset


\end_layout

\end_inset

 because this allows the container to handle any requests that Lift does
 not (in particular, static content).
 The filter acts as a thin wrapper on top of the existing LiftServlet (which
 still does all of the work), so don't be confused when you look at the
 ScalaDoc and see both classes.
 The main thing to remember is that your web.xml
\begin_inset Index
status collapsed

\begin_layout Plain Layout
web.xml
\end_layout

\end_inset

 should specify the filter and not the servlet:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},frame=single,language=XML,numbers=left,numberstyle={\tiny}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lst:LiftFilter-setup-in-web.xml"

\end_inset

LiftFilter setup in web.xml
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

<?xml version="1.0" encoding="ISO-8859-1"?>
\end_layout

\begin_layout Plain Layout

<!DOCTYPE web-app
\end_layout

\begin_layout Plain Layout

PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
\end_layout

\begin_layout Plain Layout

"http://java.sun.com/j2ee/dtds/web-app_2_3.dtd">
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<web-app>
\end_layout

\begin_layout Plain Layout

  <filter>
\end_layout

\begin_layout Plain Layout

    <filter-name>LiftFilter</filter-name>
\end_layout

\begin_layout Plain Layout

    <display-name>Lift Filter</display-name>
\end_layout

\begin_layout Plain Layout

    <description>The Filter that intercepts lift calls</description>
\end_layout

\begin_layout Plain Layout

    <filter-class>net.liftweb.http.LiftFilter</filter-class>
\end_layout

\begin_layout Plain Layout

  </filter>      
\end_layout

\begin_layout Plain Layout

  <filter-mapping>
\end_layout

\begin_layout Plain Layout

    <filter-name>LiftFilter</filter-name>
\end_layout

\begin_layout Plain Layout

    <url-pattern>/*</url-pattern>
\end_layout

\begin_layout Plain Layout

  </filter-mapping>
\end_layout

\begin_layout Plain Layout

</web-app>
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
A full web.xml example is shown in section 
\begin_inset CommandInset ref
LatexCommand vref
reference "lst:JPA-web.xml"

\end_inset

.
 In particular, the filter-mapping specifies that the Filter is responsible
 for everything.
 When the filter receives the request, it checks a set of rules to see if
 it can handle it.
 If the request is one that Lift handles, it passes it on to an internal
 LiftServlet instance for processing; otherwise, it chains the request and
 allows the container to handle it.
\end_layout

\begin_layout Section
Bootstrap
\end_layout

\begin_layout Standard
When Lift starts up there are a number of things that you'll want to set
 up before any requests are processed.
 These things include setting up a SiteMenu, URL rewriting, custom dispatch,
 classpath search and pretty much all what LiftRules object has to offer.
 The Lift servlet looks for the bootstrap.liftweb.Boot
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Boot
\end_layout

\end_inset

 class and executes the boot method in the class.
 You can also specify your own Boot instance by using the following context
 param in web.xml
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 
\begin_inset Caption

\begin_layout Plain Layout
web.xml Boot param
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

  <context-param>     
\end_layout

\begin_layout Plain Layout

	<param-name>bootloader</param-name>
\end_layout

\begin_layout Plain Layout

    <param-value>foo.bar.baz.MyBoot</param-value>
\end_layout

\begin_layout Plain Layout

  </context-param> 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Your MyBoot class needs to be a Bootable
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Bootable class
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

abstract class Bootable {   
\end_layout

\begin_layout Plain Layout

	def boot() : Unit; 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The boot method will only be run once, so you can place any initialization
 calls for other libraries here as well.
 
\end_layout

\begin_layout Standard
It is important to note that a lot of aspects related with Lift's behavior
 can be customized from boot by using LiftRules object.
 
\end_layout

\begin_layout Section
Class Resolution
\begin_inset CommandInset label
LatexCommand label
name "sec:Class-Resolution"

\end_inset


\end_layout

\begin_layout Standard
As part of our discussion of the Boot class, it's important to cover a small
 detail of how Lift determines where to find classes for Views and Snippet
 rendering.
 The LiftRules.addToPackages method tells lift what Scala packages to look
 in for a given class.
 Lift has implicit extensions to the paths you enter; in particular, if
 you tell Lift to use the 
\begin_inset Quotes eld
\end_inset

com.pocketchangeapp
\begin_inset Quotes erd
\end_inset

 package, Lift will look for View classes under 
\begin_inset Quotes eld
\end_inset

com.pocketchangeapp.view
\begin_inset Quotes erd
\end_inset

 and will look for Snippet classes under 
\begin_inset Quotes eld
\end_inset

com.pocketchangeapp.snippet
\begin_inset Quotes erd
\end_inset

.
 Typically the 
\family typewriter
addToPackages
\family default
 method is excuted in your Boot class.
 A minimal Boot class would look like
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},frame=single"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Minimal Boot class
\begin_inset CommandInset label
LatexCommand label
name "lst:Minimal-Boot-class"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

class Boot {
\end_layout

\begin_layout Plain Layout

  def boot = {
\end_layout

\begin_layout Plain Layout

    LiftRules.addToPackages("com.pocketchangeapp")
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Request/Response Lifecycle
\end_layout

\begin_layout Standard
We just explained what happens as Lift starts up, now we'll discuss what
 happens when a Request comes in.
 We'll describe the entire process to sending the Response back to the browser.
 
\end_layout

\begin_layout Standard
As this is the main part of Lift, it is a non-trivial process, but it's
 imperative that you understand the bulk of it.
 You'll be much better off knowing how the rendering pipeline works.
 There are a quite a few steps to mention in order have a clear picture
 how and where certain things are happening.
 So let's get started!
\end_layout

\begin_layout Enumerate
Execute early functions.
 See 
\family typewriter
LiftRules.appendEarly
\family default
.
 This is a mechanism that allows a user function to be called before the
 request enters the normal processing chain.
 This can be used for setting the XHTML output to UTF-8.
\end_layout

\begin_layout Enumerate
URL Rewriting, see 
\family typewriter
LiftRules.prependRewrite/appendRewrite,
\family default
 this is useful when you want to transform a URI path into something else
 such as query paramters etc.
 The result of the transformation will be passed to futher processing.
 You would use this for creating user-friendly URLs.
 For more information, please see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:URL-Rewriting"

\end_inset


\end_layout

\begin_layout Enumerate
Call LiftRules.onBeginServicing hooks.
 This is a mechanism that allows you to add your own hook functions that
 will be called when Lift is starting to procss the request.
 You could set up logging here.
\end_layout

\begin_layout Enumerate
Check for user-defined stateless dispatch (See 
\family typewriter
LiftRules.prependStatelessDispatchPF/appendStatelessDispatchPF
\family default
).
 These are partial functions that if they are defined for a given HTTP request
 they will return a LiftResponse which internally is turned in the bytes
 stream that is sent to client.
 These are very useful to build REST API's.
 The term stateless means that when the DispatchPF function is called the
 stateful object, called 
\family typewriter
S
\family default
, is not available and LiftSession not created/obtained yet.
\end_layout

\begin_layout Enumerate
Create a Lift session if there is no applicable stateless dispatch function.
\end_layout

\begin_layout Enumerate
Call 
\family typewriter
LiftSession.onSetupSession
\family default
 when the HTTP session is activated by container.
 This is a mechanism for adding hook functions when LiftSession is created.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
What?
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Initialize the 
\family typewriter
S
\family default
 object
\end_layout

\begin_layout Enumerate
Call 
\family typewriter
LoanWrapper
\family default
-s (See 
\family typewriter
S.addAround
\family default
).
 Essentially a 
\family typewriter
LoanWrapper
\family default
 is a way of wrapping the Lift's processing logic by your own code.
 This means that when your LoanWrapper implementation is called, Lift is
 also passing you a function impersonating the entire processing logic.
 Therefore you have the opportunity to as pre and post conditions to Lift's
 processing code.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Example of why you would use LoanWrapper needes
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Process the stateful request
\end_layout

\begin_deeper
\begin_layout Enumerate
Check the stateful dispatch functions (See 
\family typewriter
LiftRules.prependDispath/appendDispatch
\family default
).
 Similar with what was described on step #4 except that these functions
 are executed in the context of a LiftSession and very important in the
 context of S object (See 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:S-object"

\end_inset

).
 Of course the first function defined for this request is called and the
 LiftResponse is returned.
 For an overview of Diaptch functions please see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Dispatch-functions"

\end_inset


\end_layout

\begin_layout Enumerate
If this is a 
\series bold
Comet
\series default
 request, then process it.
 For an overview of what Comet is, please see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Comet"

\end_inset


\end_layout

\begin_layout Enumerate
If this is an 
\series bold
Ajax
\series default
 request, then:
\end_layout

\begin_deeper
\begin_layout Enumerate
Call 
\family typewriter
LiftSession.onBeginServicing
\family default
.
 Lift comes again with hooking functions.
 Note that we have LiftRules.onBeginServicing and LiftSession.onBeginServicing.
 The differences are when these hooks are called.
 In this case when Lift is about to process the stateful request.
\end_layout

\begin_layout Enumerate
Execute the user's function mapped with that specific request token (impersonate
d by a request parameter) and return the response which can be a JavaScript,
 an XML construct or virtually any LiftResponse.
 For an overview of LiftResponse please see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Lift-reponses"

\end_inset


\end_layout

\begin_layout Enumerate
Call 
\family typewriter
LiftSession.onEndServicing
\family default
.
 It's probably very intuitive what this does.
 It calls the hooks when finishing process the Ajax request.
\end_layout

\end_deeper
\begin_layout Enumerate
If this is a regular HTTP request, then:
\end_layout

\begin_deeper
\begin_layout Enumerate
Call 
\family typewriter
LiftSession.onBeginServicing
\family default
 hooks.
 Similar with an Ajax request, processing hooks are called for normal HTTP
 requests.
\end_layout

\begin_layout Enumerate
Check the user-defined dispatch functions that are set per-session.
 If there is a function applicable, execute it and return its response.
 If there is no per-session dispatch function, process the request by executing
 the Scala function that user set up for specific events (such as when clicking
 a link, or pressing the submit button, or a function that will be executed
 when a form field is set etc.).
 Please see SHtml obejct 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:SHtml"

\end_inset


\end_layout

\begin_layout Enumerate
Check the SiteMap and Loc functions.
 SiteMap is a big part of Lift, and as such, there is an entire chapter
 dedicated to it.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
SiteMap Chapter Lookup
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Lookup the template based on the Request path.
 Lift will locate the templates using various aproaches:
\end_layout

\begin_deeper
\begin_layout Enumerate
Check for ViewDispatchPF functions.
 If there is a function defined for this path invoke it and return an Either
\end_layout

\begin_layout Enumerate
If there is no ViewDispatchPF look for the template in the path specified
 in the request.
 This is a very interesting mechanism that allows you toplugin your own
 templates or views.
 Nomally you markup templates are found in templates-hidden folder of your
 web application.
 But again Lift provides excellents means for extending so you can provide
 your markup templates virtually from anywhere.
\end_layout

\end_deeper
\begin_layout Enumerate
Process the templates by executing snippets combining templates etc.
\end_layout

\begin_deeper
\begin_layout Enumerate
Merge <head> elements
\end_layout

\begin_layout Enumerate
Update the internal functions map.
 Basically associate user's scala functions with tokens that are impersonated
 in subsequent requests by HTTP parameters
\end_layout

\begin_layout Enumerate
Clean up notices (see S.error, S.warning, S.notice) since they were already
 rendered
\end_layout

\begin_layout Enumerate
Call LiftRules.convertResponse.
 Basically this glues together different pieces if information such as the
 actual markup, the response headers, cookies etc.
\end_layout

\begin_layout Enumerate
Check to see if lift needs to send HTTP redirect.
 For an overview please see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:HTTP-redirects"

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Call 
\family typewriter
LiftSession.onEndServicing
\family default
 and any end-servicing hooks.
\end_layout

\begin_layout Enumerate
Call 
\family typewriter
LiftRules.performTransform
\family default
.
 See 
\family typewriter
LiftRules.responseTransformers
\family default
.
 Essentially this is a list of functions that allows the user to make certain
 changes to the LiftResponse before being send to client.
\end_layout

\end_deeper
\begin_layout Enumerate
Call LiftRules.onEndServicing hooks.
 These are the outer end-servicing hooks called after the S object context
 was destroyed.
\end_layout

\begin_layout Enumerate
Call any before-send functions.
 You may have seen this coming, we have hooks that are called right before
 sending the response down to the pipe line.
 See 
\family typewriter
LiftRules.appendBeforeSend
\family default
.
\end_layout

\begin_layout Enumerate
Convert the LiftResponse to a raw byte stream and send it to client as an
 HTTP response.
\end_layout

\begin_layout Enumerate
Call any after-send functions.
 See 
\family typewriter
LiftRules.appendAfterSend.
\end_layout

\begin_layout Standard
At a first glance certain things of this flow may seem unclear but after
 you're familiar with Lift framework and start using it is really important
 to know when certain things are happening so you can use the Lift goodies
 in the right place.
\end_layout

\begin_layout Standard
For more details regarding LiftRules object please see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:LiftRules-object"

\end_inset


\end_layout

\begin_layout Section
LiftRules 
\begin_inset CommandInset label
LatexCommand label
name "sec:LiftRules-object"

\end_inset


\end_layout

\begin_layout Standard
The LiftRules object is the main way for configuring Lift's behavior which
 is typically done at startup in Boot.
 For more details of the LiftRules API please see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:LiftRules"

\end_inset

 or take a look at 
\family typewriter
liftweb/lift/src/main/scala/net/liftweb/http/LiftRules.scala
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
LiftRules example
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

class Boot {
\end_layout

\begin_layout Plain Layout

  def boot {
\end_layout

\begin_layout Plain Layout

    // where to search snippet
\end_layout

\begin_layout Plain Layout

    LiftRules.addToPackages("demo.helloworld")     
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    LiftRules.browserResponseToException = {
\end_layout

\begin_layout Plain Layout

	  // If there is an unexpected exception in your application during the
 processing of a request
\end_layout

\begin_layout Plain Layout

      // this anonymous function is called and you can redirect to the error
 page
\end_layout

\begin_layout Plain Layout

      case (mode, state, ex) => {ex.printStackTrace();RedirectResponse("/error")}
\end_layout

\begin_layout Plain Layout

	}  
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}  
\end_layout

\end_inset


\end_layout

\begin_layout Section
Templates
\begin_inset CommandInset label
LatexCommand label
name "sec:Templates"

\end_inset


\end_layout

\begin_layout Standard
Templates
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Templates
\end_layout

\end_inset

 form the backbone of Lift's flexibility and power.
 A template is essentially an XML file that contains Lift-specific tags
 as well as whatever content you want returned to the user.
 There are a number of built-in XML tags that Lift uses for specific reasons,
 these are of the form 
\family typewriter
<lift:name />
\family default
.
 Lift also allows you to create your own tags, which are called 
\emph on
snippets
\emph default

\begin_inset Index
status collapsed

\begin_layout Plain Layout
snippets
\end_layout

\end_inset

.
 These user-defined tags are linked directly to Scala methods and these
 methods can process the contents of the snippet tag, or can generate their
 own content from scratch.
 Below is a simple template:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},frame=single,language=XML"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Sample template
\begin_inset CommandInset label
LatexCommand label
name "lst:Sample-template"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

<lift:surround with="default" at="content">
\end_layout

\begin_layout Plain Layout

  <head><title>Hello!</title></head>
\end_layout

\begin_layout Plain Layout

  <lift:snippet type="Hello.world" />
\end_layout

\begin_layout Plain Layout

</lift:surround>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Notice the tags that are of the form 
\family typewriter
<lift:name>
\family default
 which in this case are 
\family typewriter
<lift:surround>
\family default
 and 
\family typewriter
<lift:snippet>.
 
\family default
These are two examples of Lift-specific tags.
 We'll discuss all of the tags that users will use in section Tags 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:ArchTags"

\end_inset

, but let's discuss the two contained here.
 We use the built-in 
\family typewriter
<lift:surround>
\begin_inset Index
status collapsed

\begin_layout Plain Layout
lift:surround
\end_layout

\end_inset


\family default
 tag to make Lift embed our current template inside the 
\begin_inset Quotes eld
\end_inset


\family typewriter
default
\family default

\begin_inset Quotes erd
\end_inset

 template.
 We also use 
\family typewriter
<lift:snippet>
\family default
 to execute a snippet that we defined.
 In this case we execute the method 
\family typewriter
world
\family default
 in the class 
\family typewriter
Hello 
\family default
to generate some content.
 
\end_layout

\begin_layout Standard
Following rewriting and custom dispatch, Lift checks to see if it can find
 a file in the WAR tree that matches the request
\begin_inset Note Note
status open

\begin_layout Plain Layout
WAR Tree, or is it classpath?
\end_layout

\end_inset

.
 Lift tries several suffixes (html, xhtml, htm, and no suffix) and also
 tries to match based on the client's Accept-Language header.
 The pattern Lift uses is
\end_layout

\begin_layout LyX-Code
<path to template>[_<language, optional>][.<suffix>]
\end_layout

\begin_layout Standard
Because Lift will implicitly search for suffixes, it's best to leave the
 suffix off of your links within the web app.
 If you have a link with an href of 
\family typewriter
/test/template.xhtml
\family default
, it will only match that file, but if you use 
\family typewriter
/test/template
\family default
 for the href and you have the following templates in your web app:
\end_layout

\begin_layout Itemize

\family typewriter
/test/template.xhtml
\end_layout

\begin_layout Itemize

\family typewriter
/test/template_es-ES.xhtml
\end_layout

\begin_layout Itemize

\family typewriter
/test/template_ja.xhtml
\end_layout

\begin_layout Standard
then Lift will use the appropriate template based on the user's requested
 language if a corresponding template is available.
 In addition to normal templates, your application can make use of hidden
 templates
\begin_inset Index
status collapsed

\begin_layout Plain Layout
hidden templates
\end_layout

\end_inset

.
 These are templates that are located under the 
\family typewriter
/templates-hidden
\family default
 directory of your web app.
 Like the 
\family typewriter
WEB-XML
\family default
 directory, the contents cannot be directly requested by clients.
 They can, however, be used by other templates through mechanisms like the
 
\family typewriter
lift:surround
\family default
 and 
\family typewriter
lift:embed
\family default
 tags.
 If Lift cannot locate an appropriate template based on the request path
 then it will return a 404 to the user.
\end_layout

\begin_layout Standard
Once Lift has located the correct template, the next step is to process
 the contents.
 It is important to understand that Lift processes XML tags from the outside
 in.
 That means that in our example listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:Sample-template"

\end_inset

, the surround tag gets processed first.
 In this case the surround loads the default template and embeds our content
 at the appropriate location.
 The next tag to be processed is the 
\family typewriter
<lift:Hello.world/>
\family default
 snippet.
 This tag is essentially an alias for the lift:snippet tag (specifically,
 
\family typewriter
<lift:snippet type=
\begin_inset Quotes eld
\end_inset

Hello:world
\begin_inset Quotes erd
\end_inset

>
\family default
) , and will locate the Hello class and execute the world method on it.
 If you omit the 
\begin_inset Quotes eld
\end_inset

method
\begin_inset Quotes erd
\end_inset

 part of the type and only specify the class (
\family typewriter
<lift:Hello>
\family default
 or 
\family typewriter
<lift:snippet type=
\begin_inset Quotes eld
\end_inset

Hello
\begin_inset Quotes erd
\end_inset

>
\family default
) then Lift will attempt to call the 
\family typewriter
render
\family default
 method of the class.
\end_layout

\begin_layout Standard
So templates are a nice way of setting up your layout and then writing a
 few methods to fill in the XML fragments that make up your web applications.
 They provide a simple way to generate a uniform look for your site.
 If you'd like more control or don't need a template for a certain section,
 you'll want to use a View, which is coming up in the next section.
\end_layout

\begin_layout Subparagraph

\series medium
\emph on
Sometimes it might be tempted to load manually a template (from a snippet
 for example) using LiftSession.processSurroundAndInclude.
 Even if Lift will merge your templates and invoke snippets it is HIGHLY
 recommended to NOT use this as the processing functions will not be invoked
 as the functions mapping will not happen as this is called 
\bar under
outside 
\bar default
of normal rendering pipeline.
 So in other words let's say that in a cetain point in your application
 you want to return another page then the one that was supposed to be served
 normally.
 One classic example would be that when un unnexpected exception is thrown
 you want toreturn an error page.
 Let's also say that this error page has 
\emph default
a form allowing the user to submit 
\emph on
comments about the failure.
 There is a way of 
\begin_inset Quotes eld
\end_inset

catching
\begin_inset Quotes erd
\end_inset

 soch failure by using LiftRules.browserResponseToException which willbe
 called by Lift and you can return your own LiftResponse.
 But most certainly you do not want to hardcode the response so you want
 to use an existent error.html page.
 So you can loda this from disk using LiftRules.loadResourceAsXml and the
 call the LiftSession.processSurroundAndInclude so that Lift will process
 the <lift:xxx> tags, call your snippets etc.
 Once you have this done you can return your own LiftResponse by using XhtmlResp
onse.
 When you test it you'll be surprised to see that your form is not processed
 by lift; your functions are not called.
 That's because you did these things manully but your functions set through
 SHtml object (most likely) are not seen by Lift.
 In othertems you did these things outside of Lift's rendering pipeline.
 To solve this it is recommended that youdo not manually process templates
 in your own function unless you really know what you're doing.
 In this particular case instead of doing all this, you can just use a RedirectR
esponse object.
 Please see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:HTTP-redirects"

\end_inset


\end_layout

\begin_layout Section
Views
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Convert examples to PocketChange...
 aka, work on PocketChange :)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We just discussed Templates and we saw how through a combination of an XML
 file, Lift tags, and Scala code we can respond to requests made by a user.
 You can also generate those responses entirely in code by using Views.
\end_layout

\begin_layout Standard
Views
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Views
\end_layout

\end_inset

 are implicitly defined custom dispatch methods.
 We'll cover Dispatch in more depth in the next section.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Custom-Dispatch"

\end_inset

.
 A view is a normal Scala method that returns a NodeSeq
\begin_inset Index
status collapsed

\begin_layout Plain Layout
NodeSeq
\end_layout

\end_inset

; the main difference is that with custom dispatch we explicitly define
 the path that will lead to the method via LiftRules, whereas in a view,
 the class itself defines the path.
 In either case, View lookup and dispatch is done after template resolution
 (to be covered later), so templates take priority
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: Confirm this!
\end_layout

\end_inset

.
 There are two options for implementing a view class: one is to extend the
 LiftView
\begin_inset Index
status collapsed

\begin_layout Plain Layout
LiftView
\end_layout

\end_inset

 trait, the other is to implement the InsecureLiftView
\begin_inset Index
status collapsed

\begin_layout Plain Layout
InsecureLiftView
\end_layout

\end_inset

 trait.
 As you may be able to tell from the names, we would prefer that you use
 the LiftView trait.
 The InsecureLiftView determines method dispatch by turning a request path
 into a class and method name.
 For instance, if we have a path 
\family typewriter
/MyStuff/enumerate
\family default
, then Lift will look for a class called 
\family typewriter
MyStuff
\family default
 in the view subpackage (class resolution is covered in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Class-Resolution"

\end_inset

) and if it finds it and it has a method called 
\family typewriter
enumerate
\family default
, then Lift will execute the method and return its results to the user.
 The main issue there is that Lift uses reflection
\begin_inset Index
status collapsed

\begin_layout Plain Layout
reflection
\end_layout

\end_inset

 to get the method, so it can access any method in the class, even ones
 marked private.
 A better way to do it is to use the LiftView trait, which defines a dispatch
 partial function.
 This dispatch function maps a string (the 
\begin_inset Quotes eld
\end_inset

method name
\begin_inset Quotes erd
\end_inset

) to a function that will return a NodeSeq.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:Dispatch-in-LiftView"

\end_inset

 shows a custom LiftView class where the path 
\family typewriter
/ExpenseView/enumerate
\family default
 will map to the ExpenseView.doEnumerate method.
 If someone attempts to go to 
\family typewriter
/ExpenseView/privateMethod
\family default
 they'll get a 404 since it's not defined in the dispatch function.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "frame=single"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
This should be a pocketchange example
\end_layout

\end_inset

Dispatch in LiftView
\begin_inset CommandInset label
LatexCommand label
name "lst:Dispatch-in-LiftView"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

class ExpenseView extends LiftView {
\end_layout

\begin_layout Plain Layout

  override def dispatch = {
\end_layout

\begin_layout Plain Layout

    case "enumerate" => doEnumerate _
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  def doEnumerate () : NodeSeq = {  
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

    <lift:surround with="default" at="content">
\end_layout

\begin_layout Plain Layout

     { expenseItems.toTable }
\end_layout

\begin_layout Plain Layout

    </lift:surround>
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Another difference between custom dispatch and Views is that the NodeSeq
 returned from the view method is processed for template tags including
 
\family typewriter
surrounds
\family default
 and 
\family typewriter
includes
\family default
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Confirm this!
\end_layout

\end_inset

, just like snippets.
 That means that you can use the full power of the templating system from
 within your View, as shown in listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:Dispatch-in-LiftView"

\end_inset

's 
\family typewriter
doEnumerate
\family default
 method.
\end_layout

\begin_layout Standard
Since you can choose to not include any of the pre-defined template XHTML,
 you generate Atom or RSS feeds using a View.
 Resources of that nature, such as XML responses, or JSON, or an image response,
 would most likely be handled by a View.
\end_layout

\begin_layout Section
URL Rewriting 
\begin_inset CommandInset label
LatexCommand label
name "sec:URL-Rewriting"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
I don't see anything about dispatch in this section
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now that we've gone over Templates and Views and how the dispatching of
 a request to a Class.method works we can discuss how to intercept requests
 and handle them any way we want.
 URL rewriting is the mechanism that allows you to modify the incoming request
 so that it dispatches to a different URL.
 It can be used, among other things, to allow you to:
\end_layout

\begin_layout Itemize
Use user-friendly URLs like www.example.com/user/joe instead of www.example.com/admi
n/users/88
\end_layout

\begin_layout Itemize
Use short URLs instead of long, hard to remember ones, similar to tinyurl.com
\end_layout

\begin_layout Itemize
Use portions of the URL to determine how a particular snippet or view responds.
 For example, you could make it so that a user's profile is displayed via
 a URL like 
\family typewriter
http://someplace.com/user/derek
\family default
 instead of having the username sent as part of a query string.
\end_layout

\begin_layout Standard
The mechanism is fairly simple to set up.
 We need to write a function of type 
\family typewriter
PartialFunction[RewriteRequest,RewriteResponse]
\family default
 to determine if and how we want to rewrite particular requests.
 The simplest way to do this is with a match statement which will allow
 us to selectively match on some or all of the request information.
 It is important to understand that the Lift session is not created at the
 point when the rewrite functions run; that means that you generally can't
 set or access properties in the S object.
 RewriteRequest is a case object that contains three items: the parsed path,
 the request type and the original HttpServletRequest
\begin_inset Index
status collapsed

\begin_layout Plain Layout
HttpServletRequest
\end_layout

\end_inset

 object.
\end_layout

\begin_layout Standard
The parsed path of the request in a ParsePath
\begin_inset Index
status collapsed

\begin_layout Plain Layout
ParsePath
\end_layout

\end_inset

 case class instance.
 The ParsePath class contains
\end_layout

\begin_layout Enumerate
The parsed path as a List[String]
\end_layout

\begin_layout Enumerate
The suffix of the request (i.e.
 
\begin_inset Quotes eld
\end_inset

html
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

xml
\begin_inset Quotes erd
\end_inset

, etc)
\end_layout

\begin_layout Enumerate
Whether the path is absolute 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Clarification needed on what this means
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Whether the path ends in a slash (
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Standard
The latter three properties are useful only in specific circumstances, but
 the parsed path is what lets us work magic.
 The path of the request is defined as the parts of the URI between the
 context path and the query string.
 The following table shows examples of parsed paths for a Lift application
 under the 
\begin_inset Quotes eld
\end_inset

myapp
\begin_inset Quotes erd
\end_inset

 context path:
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size footnotesize
Requested URL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size footnotesize
Parsed Path
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size footnotesize
http://foo.com/myapp/home?test_this=true
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size footnotesize
List[String](
\begin_inset Quotes eld
\end_inset

home
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size footnotesize
http://foo.com/myapp/user/derek
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size footnotesize
List[String](
\begin_inset Quotes eld
\end_inset

user
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

derek
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size footnotesize
http://foo.com/myapp/view/item/14592
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size footnotesize
List[String](
\begin_inset Quotes eld
\end_inset

view
\begin_inset Quotes erd
\end_inset

,
\begin_inset Quotes erd
\end_inset

item
\begin_inset Quotes erd
\end_inset

,
\begin_inset Quotes erd
\end_inset

14592
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The RequestType basically maps to the five HTTP methods: GET, POST, HEAD,
 PUT and DELETE.
 These are represented by the corresponding GetRequest, PostRequest, etc
 case classes, with an UnknownRequest case class to cover anything strange.
\end_layout

\begin_layout Standard
The flexibility of Scala's matching system is what really makes this powerful.
 With matching on Lists in particular, we can match parts of the path and
 capture others.
 For instance, for our second example we'd like to rewrite the 
\begin_inset Quotes eld
\end_inset

/user/<username>
\begin_inset Quotes erd
\end_inset

 path so that it's handled by the 
\begin_inset Quotes eld
\end_inset

/viewUser
\begin_inset Quotes erd
\end_inset

 template
\begin_inset Note Note
status open

\begin_layout Plain Layout
Modify for PocketChange
\end_layout

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},frame=single"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Simple rewrite example
\begin_inset CommandInset label
LatexCommand label
name "lst:Simple-rewrite-example"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

val rewriter = {
\end_layout

\begin_layout Plain Layout

  case RewriteRequest(ParsePath(user :: username :: Nil,_,_,_),_,_) => 
\end_layout

\begin_layout Plain Layout

       RewriteResponse(viewUser :: Nil, Map(username -> username))
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The RewriteResponse
\begin_inset Index
status collapsed

\begin_layout Plain Layout
RewriteResponse
\end_layout

\end_inset

 simply contains the new path to send and can also take a Map
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Map
\end_layout

\end_inset

 that contains parameters that will be accessible via S.param
\begin_inset Index
status collapsed

\begin_layout Plain Layout
S.param
\end_layout

\end_inset


\begin_inset Index
status collapsed

\begin_layout Plain Layout
S
\end_layout

\end_inset

 in the snippet or view.
 As we stated before, the LiftSession (and therefore most of S) isn't available
 at this time, so the Map is the only way to pass information on to the
 rewritten location.
 Technically, a rewrite results in a 
\begin_inset Quotes eld
\end_inset

302 Moved Temporarily
\begin_inset Quotes erd
\end_inset

 result code that forwards the client to a new request.
 Because of that, even if you could set data in LiftSession or S it would
 disappear when the redirect occurs.
\end_layout

\begin_layout Standard
We can combine the ParsePath matching with the RequestType and HttpServletReques
t to be very specific with our matches.
 For example, if we wanted to support the DELETE HTTP verb for a RESTful
\begin_inset Index
status collapsed

\begin_layout Plain Layout
RESTful
\end_layout

\end_inset

 interface through an existing template, we could redirect it like so:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\scriptsize},frame=single"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Complex rewrite example
\begin_inset CommandInset label
LatexCommand label
name "lst:Complex-rewrite-example"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

val rewriter = {
\end_layout

\begin_layout Plain Layout

  case RewriteRequest(ParsePath(username :: Nil, _, _, _),
\end_layout

\begin_layout Plain Layout

                      DeleteRequest,
\end_layout

\begin_layout Plain Layout

                      httpreq) 
\end_layout

\begin_layout Plain Layout

                      if isMgmtSubnet(httpreq.getRemoteHost()) => 
\end_layout

\begin_layout Plain Layout

       RewriteResponse(deleteUser :: Nil, Map(username -> username))
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We'll go into more detail about how you can use this in the following sections.
 In particular, SiteMap
\begin_inset Index
status collapsed

\begin_layout Plain Layout
SiteMap
\end_layout

\end_inset

 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Cross-ref
\end_layout

\end_inset

provides a mechanism for doing rewrites combined with menu entries.
\end_layout

\begin_layout Section
Dispatch functions 
\begin_inset CommandInset label
LatexCommand label
name "sec:Dispatch-functions"

\end_inset


\end_layout

\begin_layout Standard
TBC
\end_layout

\begin_layout Section
Tags
\begin_inset CommandInset label
LatexCommand label
name "sec:ArchTags"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
This needs an intro paragraph
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We introduced you to a couple of Lift Tags earlier in the the Templates
 section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Templates"

\end_inset

, namely 
\family typewriter
surround
\family default
 and 
\family typewriter
snippet
\family default
.
 We mentioned that these are reserved tags that Lift uses internally.
 We'll revisit 
\family typewriter
surround
\family default
 and 
\family typewriter
snippet
\family default
 and explain a few others.
\end_layout

\begin_layout Subsection
surround 
\end_layout

\begin_layout Standard

\emph on
Example:
\family typewriter
\emph default
 <lift:surround with="template_name">children</lift:surround>
\end_layout

\begin_layout Standard
Surrounds the child nodes with a named template (located in the <app_root>/webap
p/templates-hidden).
 It is used to apply a unified template to all the pages in a site.
 
\end_layout

\begin_layout Standard
Demo example:<lift:surround with="default"> <b>Dude</b>...
 this is my page...
 but it'll appear in your browser in a template.
 </lift:surround> 
\end_layout

\begin_layout Standard
In the target template there must be a <lift:bind /> tag to indicate where
 the contents should be bound.
 Note that you can use multiple surround templates by adding them to the
 /templates-hidden directory.
 For example, you might want to have a separate template for your administrative
 pages.
 In that case, you might add that template as admin.html in the /templates-hidden
 directory and then call it from your other pages using:<lift:surround with="adm
in">page code here</lift:surround>
\end_layout

\begin_layout Standard
Notes: You cannot have a hidden template with the same name as a sub-directory
 of your webapp directory.
 For example, if you had an admin.html template in /templates-hidden, you
 could not also have an admin directory.
 
\end_layout

\begin_layout Subsection
snippet
\begin_inset CommandInset label
LatexCommand label
name "sub:snippet-tag"

\end_inset


\end_layout

\begin_layout Standard

\emph on
Example:
\family typewriter
\emph default
 <lift:snippet form="METHOD" type="ClassName:method" multipart="true" />
\end_layout

\begin_layout Standard
The 
\family typewriter
form
\family default
 and 
\family typewriter
multipart
\family default
 attributes are optional.
 If 
\family typewriter
form
\family default
 is included the attribute options are 
\family typewriter
GET
\family default
 and 
\family typewriter
POST.

\family default
 The 
\family typewriter
type
\family default
 attribute resolves to the method call 
\family typewriter
ClassName.method
\family default
.
 The 
\family typewriter
multipart
\family default
 attribute is a boolean.
\end_layout

\begin_layout Standard
Demo example:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},numbers=left,numberstyle={\tiny}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Snippet that generates a NodeSeq
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

class Entry {
\end_layout

\begin_layout Plain Layout

def add(xhtml: Group): NodeSeq =     
\end_layout

\begin_layout Plain Layout

  selectedUser.is.openOr(new User).toForm(Empty, saveUser _) ++ 
\end_layout

\begin_layout Plain Layout

  <tr>     
\end_layout

\begin_layout Plain Layout

    <td><a href="/simple/index.html">Cancel</a></td>     
\end_layout

\begin_layout Plain Layout

    <td><input type="submit" value="Create"/></td>     
\end_layout

\begin_layout Plain Layout

  </tr>
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Y ou could use this snippet in the following manner:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

<lift:Entry.add form="POST"/>
\end_layout

\begin_layout Plain Layout

or
\end_layout

\begin_layout Plain Layout

<lift:snippet type="Entry.add" form="POST" />
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},numbers=left,numberstyle={\tiny}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Snippet that generates Nodes to bind...
 TODO: Explain the difference better...
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

class Entry {
\end_layout

\begin_layout Plain Layout

  def showCount(in: NodeSeq): NodeSeq = {     
\end_layout

\begin_layout Plain Layout

    val attr: String = S.attr("name").openOr("N/A")     
\end_layout

\begin_layout Plain Layout

    val value = CountHolder.is(attr)
\end_layout

\begin_layout Plain Layout

    bind("count", in, "value" -> value, 
\end_layout

\begin_layout Plain Layout

      "incr" -> link("/count", () => CountHolder.is(attr) = value + 1, Text("++")
),     
\end_layout

\begin_layout Plain Layout

      "decr" -> link("/count", () => CountHolder.is(attr) = 0 max (value
 - 1), Text("--")))   
\end_layout

\begin_layout Plain Layout

  } 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You would then use this snippet like this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

<lift:Entry.showCount>
\end_layout

\begin_layout Plain Layout

  Click this to increse the counter: <count:incr /><br />
\end_layout

\begin_layout Plain Layout

  Click this to decrease the counter: <count:decr />
\end_layout

\begin_layout Plain Layout

</lift:Entry.showCount>
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
embed 
\end_layout

\begin_layout Standard

\emph on
Example:
\family typewriter
\emph default
 <lift:embed what="template" />
\end_layout

\begin_layout Standard
Uses: Allows you to embed a template within another template (or to access
 a template from a JsCmd such as SetHtml, ModalDialog, etc.)
\end_layout

\begin_layout Standard
Note that incoming requests that contain *-hidden in the request will not
 be serviced, but you can access templates in directories named *-hidden.
 So, you can put AJAX templates in /ajax-templates-hidden in webapps.
\end_layout

\begin_layout Standard
Also, lift's i18n support extends to templates as well, so you can specify
 "/ajax-templates-hidden/welcome" and lift will serve the appropriate localized
 template.
 For example, if the current locale is set to French Canadian lift will
 look for /ajax-templates-hidden/welcome_fr_CA.html, /ajax-templates-hidden/welco
me_fr.html, and /ajax-templates-hidden/welcome.html 
\end_layout

\begin_layout Standard
Demo example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Embedding Templates within Templates
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

<lift:embed what="/templates-hidden/supersecret-template"/>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
<lift:embed what="/ajax-templates-hidden/welcome" />
\end_layout

\begin_layout Standard
<lift:embed what="/templates-hidden/ajax"/>
\end_layout

\begin_layout Standard
Caveats: JavaScript contained in templates rendered via JsCmd (sent in response
 to AJAX requests) will not be executed.
 This includes Comet Widgets.
 
\end_layout

\begin_layout Subsection
comet 
\end_layout

\begin_layout Standard

\emph on
Example:
\family typewriter
\emph default
 <lift:comet type="ClassName" name="optional"/>
\end_layout

\begin_layout Standard
Uses: Defines a block of the XML document that is to be con
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},language=Java,numbers=left,numberstyle={\tiny}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Comet Html template
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

<div class="widget">
\end_layout

\begin_layout Plain Layout

  <lift:comet type="Clock">Current Time: 
\end_layout

\begin_layout Plain Layout

    <clk:time>Missing Clock</clk:time>
\end_layout

\begin_layout Plain Layout

  </lift:comet>
\end_layout

\begin_layout Plain Layout

</div>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Will turn into this after processing:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},numbers=left,numberstyle={\tiny}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Comet as rendered in the browser
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

<div style="text-align: center" class="widget">   
\end_layout

\begin_layout Plain Layout

<span id="LCHVVTE3H5CHZ31L1C2ZEQ_outer">     
\end_layout

\begin_layout Plain Layout

<span id="LCHVVTE3H5CHZ31L1C2ZEQ" lift:when="12">
\end_layout

\begin_layout Plain Layout

  Current Time: 
\end_layout

\begin_layout Plain Layout

  <span id="LCHVVTE3H5CHZ31L1C2ZEQ_timespan">Fri Nov 14 17:29:53 EST 2008</span>
     
\end_layout

\begin_layout Plain Layout

<script>     
\end_layout

\begin_layout Plain Layout

// <![CDATA[     /* JSON Func clk $$ F1226701773224999000_BBP */     
\end_layout

\begin_layout Plain Layout

function F1226701773224999000_BBP(obj) {
\end_layout

\begin_layout Plain Layout

  lift_ajaxHandler('F1226701773224999000_BBP='+ encodeURIComponent(JSON.stringify
(obj)), 
\end_layout

\begin_layout Plain Layout

  null, null);
\end_layout

\begin_layout Plain Layout

}     
\end_layout

\begin_layout Plain Layout

// ]]>     
\end_layout

\begin_layout Plain Layout

</script>
\end_layout

\begin_layout Plain Layout

</span>
\end_layout

\begin_layout Plain Layout

<script>     
\end_layout

\begin_layout Plain Layout

// <![CDATA[     
\end_layout

\begin_layout Plain Layout

var destroy_LCHVVTE3H5CHZ31L1C2ZEQ = function() {}     
\end_layout

\begin_layout Plain Layout

// ]]>     
\end_layout

\begin_layout Plain Layout

</script>     
\end_layout

\begin_layout Plain Layout

</span>     
\end_layout

\begin_layout Plain Layout

</div>  
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Caveats: if you have a <lift:comet /> tag and you're using the tag from
 within sending AJAX stuff back, things might not work well.
 
\end_layout

\begin_layout Standard
More in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Snippets"

\end_inset


\end_layout

\begin_layout Section
Snippets
\end_layout

\begin_layout Standard
A snippet method takes a single Scala.xml.NodeSeq
\begin_inset Index
status collapsed

\begin_layout Plain Layout
NodeSeq
\end_layout

\end_inset

 argument and is expected to return a NodeSeq.
 The argument passed to the method is the XML contents of the snippet tag;
 because Lift processes from the outside in, the contents are not processed
 by default before being passed to the snippet method.
 For our current example, we could simply have a method that looks like
 this:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "frame=single"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Hello World snippet
\begin_inset CommandInset label
LatexCommand label
name "lst:Hello-World-snippet"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

class Hello {
\end_layout

\begin_layout Plain Layout

  def world (content : NodeSeq) : NodeSeq = 
\end_layout

\begin_layout Plain Layout

    Text("Hello, world!")
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We simply return an XML Text node with our greeting.
 Note that the XML that a snippet returns is further processed from the
 outside in, so if your snippet instead looked like
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Returning tags from a snippet
\begin_inset CommandInset label
LatexCommand label
name "lst:Returning-tags-snippet"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

class Hello {
\end_layout

\begin_layout Plain Layout

  def world (content : NodeSeq) : NodeSeq = 
\end_layout

\begin_layout Plain Layout

    <p>{"Hello, "}<lift:User.name /></p>
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
then the lift:User.name snippet will be processed as well after our snippet
 method returns.
 It is this hierarchical processing of template tags that makes Lift so
 flexible.
\end_layout

\begin_layout Subsection
Stateless Snippets
\end_layout

\begin_layout Standard
All of the above examples showed Stateless snippets, those that execute
 and render a block of XML and send it back to the broswer.
 The life This is the default type of snippet
\begin_inset Note Note
status open

\begin_layout Plain Layout
This appears to be an incomplete edit/sentence.
 Also expand to give an idea of the limitations and scope of a stateless
 snippet
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Subsection
Stateful Snippets
\end_layout

\begin_layout Standard
Lift also has a the concept of a stateful snippet.
 All of our previous examples, while simple, were stateless.
 That is to say, from request to request, there is no saved state on the
 server-side.
 Stateless snippets are useful in the sense that many requirements for a
 web applications need no state to be preserved as the user moves from page
 to page.
 There are a similar number of cases where we would like to preserve some
 state as the user navigates.
 For example, if you think about a graph that shows your spending for the
 last 3 months.
 You've changed the time span from the default 1 month to 3 months.
 Now you'd like to limit the exspense categories to show only 
\begin_inset Quotes eld
\end_inset

Food.
\begin_inset Quotes erd
\end_inset

 More than likely, you'll want the application to respect the change in
 time-span as well.
 This is a case where keeping a bit of state around will allow you to do
 this.
 The same StatefulSnippet instance is used across a given page rendering.
 If you use a StatefulSnippet to render a form, a hidden field is added
 to that form that causes the same instance to be used on the page that
 is the target of the form submission.
 
\end_layout

\begin_layout Standard
Below is an example of a stateful snippet that handles the above example.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Write and then steal from PocketChange
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Default Snippet Method
\end_layout

\begin_layout Standard
If you define a snippet as 
\family typewriter
<lift:CSS />
\family default
 rather than 
\family typewriter
<lift:CSS.show /> 
\family default
Lift will look for the method named 
\family typewriter
render
\family default
 in the class 
\family typewriter
CSS
\family default
.
\end_layout

\begin_layout Section
Eager Eval
\end_layout

\begin_layout Standard
If you want the contents of a snippet tag to be processed 
\emph on
before
\emph default
 the snippet, then you would specify the 
\family typewriter
eager_eval
\family default

\begin_inset Note Note
status open

\begin_layout Plain Layout
Add index entry
\end_layout

\end_inset

 attribute on the tag:
\end_layout

\begin_layout LyX-Code
<lift:Hello.world eager_eval=
\begin_inset Quotes erd
\end_inset

true
\begin_inset Quotes erd
\end_inset

>...</lift:Hello.world>
\end_layout

\begin_layout Standard
This is especially useful if you're using a 
\family typewriter
lift:embed
\family default
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Add index entry
\end_layout

\end_inset

tag; without the eager_eval attribute your snippet just sees the <lift:embed>
 tag, but with eager_eval set to true you can put 
\emph on
bindable
\emph default
 common snippet content into a single embedded template instead of copying
 it between templates.
 In addition to eager_eval, there are attributes such as 
\family typewriter
form
\family default
 and 
\family typewriter
multipart
\family default
 which we will cover in extensive detail in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:snippet-tag"

\end_inset

.
 
\end_layout

\begin_layout Section
Head Merge
\end_layout

\begin_layout Standard
Another feature of Lift's template processing is the ability to merge the
 HTML 
\family typewriter
head
\family default

\begin_inset Index
status collapsed

\begin_layout Plain Layout
head
\end_layout

\end_inset

 tag from within a template.
 In our example listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:Sample-template"

\end_inset

, notice that we've specified a 
\family typewriter
head
\family default
 tag inside the template.
 Without the head merge, this head tag would show up in the default template
 where our template gets bound.
 Lift is smart about this, though, and instead takes the contents of the
 head tag and merges it into the outer template's head tag.
 This means that you can use a surround tag to keep a uniform default template,
 but still change things like the title of the tag, add in scripts or special
 CSS, etc.
 For example, if you have a table in a page that you'd like to style with
 jQuery's TableSorter, you would add a Lift tag:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<lift:tohead><script src="/scripts/tablesorter.js" type="text/javascript"
 /></lift:tohead>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And just for this snippet, you'll import TableSorter.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Better example: Head merge looks like it's gone...
 WARN - Snippet Failure: SnippetFailure(/index -> ParsePath(List(index),,true,fa
lse),Full(tohead),Class Not Found)
\end_layout

\end_inset


\end_layout

\begin_layout Section
S object
\begin_inset CommandInset label
LatexCommand label
name "sec:S-object"

\end_inset


\end_layout

\begin_layout Section
SHtml
\begin_inset CommandInset label
LatexCommand label
name "sec:SHtml"

\end_inset


\end_layout

\begin_layout Standard
The SHtml object is where most of the form element methods are defined.
 If you browse through the source you'll see what convenience functions
 are defined.
 There are a lot so we won't list them here, but throughout the book you'll
 see them appear in the example application we're building.
\end_layout

\begin_layout Standard
Some of the functions are text, button, select, checkbox, there are a lot
 more helper functions, so take a look at the ScalaDocs and at net/liftweb/http/
SHtml.scala.
\end_layout

\begin_layout Standard
Here's a short snippet for generating a form:
\begin_inset Note Note
status open

\begin_layout Plain Layout
Add the tag in the template as well? Add the output that lift generates?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
SHtml Example - Snippet
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

class Ajax {
\end_layout

\begin_layout Plain Layout

  def addForm = {     
\end_layout

\begin_layout Plain Layout

    <div>
\end_layout

\begin_layout Plain Layout

     {SHtml.text("Date", println _)}      
\end_layout

\begin_layout Plain Layout

     {SHtml.textarea("Description", println _)}     
\end_layout

\begin_layout Plain Layout

     {SHtml.text("Tags", println _)}     
\end_layout

\begin_layout Plain Layout

     {SHtml.text("Value", println _)}     
\end_layout

\begin_layout Plain Layout

     {SHtml.submit("Submit", () => S.notice("Submitted"))}
\end_layout

\begin_layout Plain Layout

    </div>   
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And the template would be:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
SHtml Example - Template
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

<body>
\end_layout

\begin_layout Plain Layout

  <lift:Ajax.addForm form="POST" />
\end_layout

\begin_layout Plain Layout

</body>
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Which generates the markup:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
SHtml Example - Generated Markup
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

<form method="post" action="/ajax">
\end_layout

\begin_layout Plain Layout

  <div>     
\end_layout

\begin_layout Plain Layout

    <input name="F1228357378876744000_D3J" type="text" value="Date" /><br
 />     
\end_layout

\begin_layout Plain Layout

    <textarea name="F1228357378876890000_GXL">Description</textarea><br
 />     
\end_layout

\begin_layout Plain Layout

    <input name="F1228357378876940000_BLK" type="text" value="Tags" /><br
 />     
\end_layout

\begin_layout Plain Layout

    <input name="F1228357378877015000_RED" type="text" value="Value" /><br
 />
\end_layout

\begin_layout Plain Layout

    <input name="F1228357378877116000_SZF" type="submit" value="Submit"
 /><br />     
\end_layout

\begin_layout Plain Layout

  </div>
\end_layout

\begin_layout Plain Layout

</form>
\end_layout

\end_inset


\end_layout

\begin_layout Section
SiteMap
\begin_inset CommandInset label
LatexCommand label
name "sec:SiteMap"

\end_inset


\end_layout

\begin_layout Standard
We're only going to touch on SiteMap here as we have a whole chapter dedicated
 to it due to it's size, but an introduction, we think, is required.
 
\end_layout

\begin_layout Standard
SiteMap has a number of roles and they all build off the main goal, which
 is acting as a URL whitelist, arbitrating a users access to resources.
 And because it acts like the gatekeeper of resources, it can automatically
 generate your menu items.
 SiteMap can use all of the URL rewriting methods we discussed above as
 well.
\end_layout

\begin_layout Standard
Take a look at the SiteMap chapter to get a better feel of what it can do.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Reference???
\end_layout

\begin_layout Plain Layout
Sets up URL whitelisting
\end_layout

\begin_layout Plain Layout
Builds a menu with submenus
\end_layout

\begin_layout Plain Layout
URL rewriting
\end_layout

\begin_layout Plain Layout
When a request comes in, it is recursively re-written and query params are
 optionally extracted.
\end_layout

\begin_layout Plain Layout
The Menu generation is a freebie based on the URL access control
\end_layout

\begin_layout Plain Layout
We're mentioning it here briefly, as we have an entire chapter dedicated
 to SiteMap.
 It's worth touching on as it relates to most of what we just discussed.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Lift reponses
\begin_inset CommandInset label
LatexCommand label
name "sec:Lift-reponses"

\end_inset


\end_layout

\begin_layout Section
Comet
\begin_inset CommandInset label
LatexCommand label
name "sec:Comet"

\end_inset


\end_layout

\begin_layout Section
HTTP redirects 
\begin_inset CommandInset label
LatexCommand label
name "sec:HTTP-redirects"

\end_inset


\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
We just gave you a detailed view of Lift's architecture.
 This is important material, so you'll want to understand it before moving
 on.
\end_layout

\end_body
\end_document
