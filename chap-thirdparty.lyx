#LyX 1.6.0 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\use_default_options false
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Third Party Integrations
\end_layout

\begin_layout Standard
In this chapter we'll explore how you can integrate Lift with some well-known
 third party libraries and applications
\end_layout

\begin_layout Section
OpenID Integration
\end_layout

\begin_layout Standard
The OpenID Foundation
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://openid.net/
\end_layout

\end_inset


\end_layout

\end_inset

 explain OpenID as:
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

OpenID eliminates the need for multiple usernames across different websites,
 simplifying your online experience.
\end_layout

\begin_layout Standard
You get to choose the OpenID Provider that best meets your needs and most
 importantly that you trust.
 At the same time, your OpenID can stay with you, no matter which Provider
 you move to.
 And best of all, the OpenID technology is not proprietary and is completely
 free.
 For businesses, this means a lower cost of password and account management,
 while drawing new web traffic.
 OpenID lowers user frustration by letting users have control of their login.
 For geeks, OpenID is an open, decentralized, free framework for user-centric
 digital identity.
 OpenID takes advantage of already existing internet technology (URI, HTTP,
 SSL, Diffie-Hellman) and realizes that people are already creating identities
 for themselves whether it be at their blog, photostream, profile page,
 etc.
 With OpenID you can easily transform one of these existing URIs into an
 account which can be used at sites which support OpenID logins.
\end_layout

\begin_layout Standard
OpenID is still in the adoption phase and is becoming more and more popular,
 as large organizations like AOL, Microsoft, Sun, Novell, etc.
 begin to accept and provide OpenIDs.
 Today it is estimated that there are over 160-million OpenID enabled URIs
 with nearly ten-thousand sites supporting OpenID logins.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Lift provides openId support using onepID4Java
\begin_inset Foot
status open

\begin_layout Plain Layout
http://code.google.com/p/openid4java/
\end_layout

\end_inset

.
 It provides two fundamental traits 
\family typewriter
net.liftweb.openId.OpenIdVendor
\family default
 and 
\family typewriter
net.liftweb.openId.OpenIdConsumer.
 OpenIdVendor
\family default
 contains variables such as:
\end_layout

\begin_layout Itemize
PathRoot - The path sequence for processing OpenID requests.
 The default value is 
\begin_inset Quotes eld
\end_inset

openid
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
LoginPath - The path sequence for processing login requests.
 The default value is 
\begin_inset Quotes eld
\end_inset

login
\begin_inset Quotes erd
\end_inset

.
 The login path will be /openid/login
\end_layout

\begin_layout Itemize
LogoutPath - The path sequence for processing logout requests.
 The default value is 
\begin_inset Quotes eld
\end_inset

logout
\begin_inset Quotes erd
\end_inset

.
 The login path will be /openid/logour
\end_layout

\begin_layout Itemize
ResponsePath - The path sequence for processing login requests.
 The default value is 
\begin_inset Quotes eld
\end_inset

response
\begin_inset Quotes erd
\end_inset

.
 The login path will be /openid/response
\end_layout

\begin_layout Itemize
PostParamName - The form parameter name containing the OpeID identity URL
 entered by the user
\end_layout

\begin_layout Standard
Also the vendor trait contains the loginForm function that returns the login
 form containing an input text field for the OpenID identity and the submit
 button.
 The form will point to /<PathRoot>/<LoginPath> where PathRoot and LoginPath
 are the variables described above.
 Here is an example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout

OpenID example
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

// Your template
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

<lift:OpenID.form>
\end_layout

\begin_layout Plain Layout

  <openId:renderForm/>
\end_layout

\begin_layout Plain Layout

</lift:OpenID.form>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Your snippet
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class OpenID {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  def renderForm(xhtml: NodeSeq) : NodeSeq = {
\end_layout

\begin_layout Plain Layout

	SimpleOpenIdVendor.loginForm
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class Boot {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  ...
\end_layout

\begin_layout Plain Layout

  // This is needed in order to process the login and logout requests and
 also to process
\end_layout

\begin_layout Plain Layout

  // the response comming from OpenID provider
\end_layout

\begin_layout Plain Layout

  LiftRules.dispatch.append(SimpleOpenIdVendor.dispatchPF)
\end_layout

\begin_layout Plain Layout

  ...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
That is pretty much all you need to add into your Lift application.
 The authentication flow is:
\end_layout

\begin_layout Enumerate
User accesses your lift page that contains the OpenID form
\end_layout

\begin_layout Enumerate
User enters his/her OpenID identity URL and submits the form
\end_layout

\begin_layout Enumerate
The dispatchPF function that we appended above will process the /openid/login
 request and will send the authentication request to the Identity Provider
 site
\end_layout

\begin_layout Enumerate
Identity Provider will validate the user and redirect back to your Lift
 application to /openid/response path.
\end_layout

\begin_layout Enumerate
The response is validated using OpenId4Java library
\end_layout

\begin_layout Enumerate

\family typewriter
OpenIdConsumer.postLogin
\family default
 gets called.
\end_layout

\begin_layout Standard
The SimpleOpenIDVendor looks like:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout

SimpleOpenIDVendor
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

trait SimpleOpenIdVendor extends OpenIdVendor {   
\end_layout

\begin_layout Plain Layout

  type UserType = Identifier   
\end_layout

\begin_layout Plain Layout

  type ConsumerType = OpenIDConsumer[UserType]
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  def currentUser = OpenIdUser.is
\end_layout

\begin_layout Plain Layout

  def postLogin(id: Box[Identifier],res: VerificationResult): Unit = {
\end_layout

\begin_layout Plain Layout

    id match {
\end_layout

\begin_layout Plain Layout

      case Full(id) => S.notice("Welcome "+id)
\end_layout

\begin_layout Plain Layout

      case _ => S.error("Failed to authenticate")
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    OpenIdUser(id)
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  def logUserOut() {
\end_layout

\begin_layout Plain Layout

    OpenIdUser.remove   
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  def displayUser(in: UserType): NodeSeq = Text("Welcome "+in)
\end_layout

\begin_layout Plain Layout

  def createAConsumer = new AnyRef with OpenIDConsumer[UserType]
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

object SimpleOpenIdVendor extends SimpleOpenIdVendor 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note the postLogin implementation.
 Of course if you need a more complex post-login processing you can extend
 OpenIdVendor by yourself.
 During this message exchange between the Identity Provider ans your Lift
 application, Lift utilizes a couple of SessionVars:
\end_layout

\begin_layout Itemize
OpenIdObject - holds an OpenIDConsumer
\end_layout

\begin_layout Itemize
OpenIdUser - holding an org.openid4java.discovery.Identifier
\end_layout

\begin_layout Section
Lucene/Compass Integration
\end_layout

\begin_layout Standard
\begin_inset Box Framed
position "t"
hor_pos "c"
has_inner_box 0
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
This chapter is still under active development.
 The contents will change.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Search is a requirement for any app
\end_layout

\begin_layout Plain Layout
Dave has some code in ESME for this, I'll ask if we can pinch it as a starting
 point.
\end_layout

\end_inset


\end_layout

\end_body
\end_document
