We chose a license: http://creativecommons.org/license/results-one?license_code=by-nd
License:
This work is licensed under the Creative Commons Attribution-No Derivative Works 3.0 Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nd/3.0/ or send a letter to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.



 Table of Contents:

Pick an application to build from scratch.
Should we compare and contrast with other frameworks? I don't know many others --Tyler

Ideas:
1. Include a "Lift quick reference card": all of the lift template tags, brief overview of the render flow (with cross-refs)

-------------------- 
IMHO we should start with an introduction that gives a brief overview
of what Lift is trying to solve, how it works and why it does it
well. The first half would explain some basics about it (built on
Scala, incredible template support, clean separation of V and C), and
then the second half would walk the user through running the HelloLift
example just to get something going out of the box. From my
understanding at this point that would involve just three things:
installing Java (if required), installing Maven2, and then downloading
and running the HelloLift project zip. Of those three, I think
installing Maven is probably the most complex - Derek

So you see 2 distinct Sections: Generalized info and intro, and
getting into and building an app? Sounds good to me. -Tyler

Next question is how much should assume about Scala knowledge? - Derek

--------------------

====== Intro Section ======

1. Introduction
  * Welcome to lift
  * What is lift?
    * Fast, flexible template-based web framework built on Scala
      * Full-featured template system
      * Clean separation of M,V and C
      * Powerful Web 2.0 (AJAX, COMET) support baked in
      * Thriving community of developers
    * Brief overview of Scala
      * OO/FP Hybird
      * Compiles to JVM Bytecode
      * Made by the good people who brought us generics
      * You get a new powerful language with access to all of Java's libs
  * Why another framework?
    * Too much boilerplate in other frameworks (Struts, we're talking about you)
    * Exposure of programming logic in templates makes things difficult (JSP, etc)
    * Scala has higher efficiency in terms of LoC per function point
    * Powerful AJAX, COMET and JS support
  * Let's try out HelloLift
    * Prerequisites
      * Java 1.5 or newer (Scala is not required directly since Maven will pull it down)
      * Maven 2 - include a very brief synopsis on Maven. Anything more detailed should point to the Maven site or go in an appendix
      * Some sort of programming editor is recommended: mention emacs, Eclipse, NetBeans, JEdit, etc.
    * Download the HelloLift project and unzip it
    * "mvn jetty:run"
    * Profit!
    * Cursory examination of:
      * Index template (shows surround and snippet)
      * Default template
      * Hello snippet

2. Getting to know Maven and Project layout (based on HelloLift example)

- I think this should be a small, but self-contained section with
  enough info so that someone who wanted to do "standard" things with
  Maven wouldn't need to go digging around on the site. In other
  words, enough info on maven in this book to handle all of the
  examples we use in the book.

  * What is maven
    * Comprehensive project and build management
    * Structured project layout (conventions)
    * Dependency management
    * Automated testing and packaging
    * Automated reporting
  * Archetypes: project "templates"
  * Directory layout
    * Scala-specific stuff
    * web content
    * resources
  * Introducing the POM
    * Project info (author, date, version, etc)
    * Repo definitions
    * Dependencies
    * Special build targets

====== General Topics ======

3. Lift Architecture in general (need info from dpp and marius)
  * Everything handled by LiftFilter
    * Show example config in web.xml
    * Handling in LiftFilter allows fall-through to default handlers for things that Lift doesn't handle (Static content, primarily)
  * Rendering pipeline (This can be high-level right now, with links to detailed info in the advanced section - Derek)
    * Dispatch to proper code
      * dispatch methods in effect?
      * rewrite methods in effect?
      * SiteMap matching and access control
      * template or view matched?
        * recursive processing of template and any snippets contained therein
	* direct processing of view
      * Error handling
    * List of tags that are handled by Lift (stolen from http://liftweb.net/index.php/LiftTags, not sure how up-to-date this is)
      * surround
      * embed
      * comet
      * ignore
      * snippet (and, the alternative lift:<class>.<method>)
      * additional attribute handling in tags (via S.attr)

4. A detailed look at lift user components
  * SiteMap
    * Performs two primary duties: generates the menu for your site (customizable) and performs per-page access control
    * Cover Menu, Loc objects to define paths and superpaths (my term for paths that match anything under them)
    * Additional attributes
      * If
      * Unless
      * Test
      * Title
  * Templates
    * Static xml that may embed or surround other templates, and may embed snippets (reference tag list)
    * well-formed XML
    * Special template-hidden directory not directly accessible
    * Use of prefixed elements to assist with binding in snippets
    * Re-cover how templates are located/dispatched
  * Snippets
    * Chunks of code that generate pieces of a final output page. May themselves generate template code that is interpreted
    * Generic Scala classes (stateless)
    * How to deal with state in snippets
      * RequestVars
      * SessionVars
      * StatefulSnippets
    * Using Helpers.bind. In particular, cover view vs. forms usage
    * Using Helpers.chooseTemplate for nested templates
  * Views
    * Chunks of code intended to generate a complete page
    * Can be shoehorned to process template code via processSurroundAndInclude
    * Re-cover how views are located/dispatched
      * Path-based (/my/view)
      * addDispatchBefore/After
  * What are the use cases for snippets vs. views?

5. Intro to the Mapper package
... This may be Mapper, or it may be Record

6. AJAX and COMET
  * What is COMET?
    * Method for async updates pushed *from server to client*
    * Connection is kept open
      * Streaming
      * Long polling
    * Scalability issues
    * Using COMET in Lift
      * CometActor 
      * Mine Jorge's blog post: http://scala-blogs.org/2007/12/dynamic-web-applications-with-lift-and.html
    * Go through Dynamic chat room example
  * What is AJAX?
    * Method for async updates pulled from the client without a full page reload
    * Relies heavily on javascript and XML
    * Javascript client-side events (button push, timer, etc) trigger requests "behind the scenes" 
    * Web 2.0 built on this
    * Using AJAX in Lift
      * Allows you to bind Javascript events (AJAX) to form elements, links, etc
    * Go through example HelloDarwin AJAX example

7. Deployment

  - Ask the list what they are deploying with. Generally it shouldn't
    be an issue where they deploy since Lift is essentially
    self-contained. We can go into specifics for special cases, I
    suppose

  * Basic deployment via Jetty
    * Brief overview of Jetty
      * Capabilities
      * Configuration
      * SSL
    * How jetty is configured in maven for testing
      * Changing the default port (8080)
    * Tips and tricks
  * Deployment in Tomcat
    * Packaging options (pom dependency scope)
  * Deployment in JBoss
  * Deployment in GlassFish

====== Advanced Topics ======

8. Detailed request/response handling info (should cover how Actors are used, too)
  1. Request hits LiftFilter
  2. LiftFilter executes each item in LiftRules.early. This would allow you to do advance processing of the HttpRequest
  3. Rewrites occur per the LiftRules.rewriteTable (set up via LiftRules.addRewriteBefore/After)
  4. LiftFilter determines whether the request should be handled by Lift or if it should be chained. If the processing fails it's automatically chained
  5. Processing takes place via the LiftFilter's internal LiftServlet instance
  6. If Lift is running in Jetty, any continuations are invoked (explain a little about Jetty continuations here...). If continuation exists and returns a response, return
  7. LiftServlet checks LiftRules.statelessDispatchTable and returns if matched (what is this for?)
  8. LiftServlet checks LiftRules.dispatchTable (set up via LiftRules.addDispatchBefore/After) and if dispatches match it dispatches there and returns the result
    * detail dispatch handling
  9. LiftServlet then checks to see if the request starts with LiftRules.cometPath (default "comet_request") and if so, handles the request as a COMET request
    * detail COMET handling path
  10. LiftServlet then checks to see if the request starts with LiftRules.ajaxPath (default "ajax_request") and if so, handles the request as an AJAX request
    * detail AJAX handling
  11. If nothing else has occurred, do normal template processing at this point
    1. Lookup template based on path
    2. Process template recursively (surround, include, etc)
  * Additional topics
    * S.addAround and LoanWrapper
    * How S.attr works in conjunction with XML attributes on snippets, etc and with Rewriting

9. URL Rewriting
  * What is URL rewriting
  * Using LiftRules.addRewriteBefore.After
  * What constitutes a rewrite function?
  * Using the params Map to pass parts of the path back into your code via S.param
  * Example: user-friendly URLs

10. JSON handling
  * What is JSON?
    * Technically, just a data format for Javascript (http://www.json.org/)
    * Used as an RPC transfer format
    * Well-suited to AJAX because it's essentially javascript
  * How does Lift support JSON?
    * JsonHandler allows simple wrapping and processing of JSON (AJAX) forms
    * JsonCmd allows matching of submitted JSON
  * Go through example JSON/AJAX submission form. Maybe it would be best to make
    it an extension of one of the other examples?

11. JsCommands
  * Integrated javascript handling without hard-coding it in templates
  * jQuery intro
    * Utility library that makes IE6 less ugly ;)
    * Powerful support for dynamic attributing of elements
    * Based on CSS selectors
  * Talk about Marius JS abstraction

12. AJAX and COMET in depth
- this is probably the place for the Spreadsheet example
- talk about design "patterns" ex. the proper TagCloud example

13. JPA Integration
- [I know nothing about this -Tyler]

14. Using Scala Actors
- this is a broad topic, ask the committor list for opinions


====== Advanced Examples ======

15. OpenID Integration

16. Lucene/Compass Integration

17. Tagging support

====== Appendices ======

A. Lift message handling
- What happens now
- How to Fade them web2.0 stylee!

B. Helpers methods, in particular Can/Empty/Full
- Can is super important, as it's everywhere

C. I18N and L10N
  * S.?(String)
  * lift:loc tag
  * Proper placement of language resources

D. Logging
  * Configuring built-in log4j
  * Using slf4j instead
  

E. Mailer
  * Configuring the mailer lib
  * Sending email

