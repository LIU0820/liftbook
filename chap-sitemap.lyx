#LyX 1.6.0 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\use_default_options false
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
SiteMap
\begin_inset CommandInset label
LatexCommand label
name "cha:SiteMap"

\end_inset


\end_layout

\begin_layout Standard
SiteMap is a very powerful part of Lift that does essentially what it says:
 provides a map (menu) for your site.
 Of course, if all it did was generate a set of links on your pages we wouldn't
 have a whole chapter dedicated to it.
 SiteMap not only handles the basic menu generation functionality, but it
 also provides:
\end_layout

\begin_layout Itemize
Access control mechanisms that dela not only with whether a menu item is
 visible, but whether the page it points to is accessible
\end_layout

\begin_layout Itemize
Grouping of menu items so that you can easily display portions of menus
 where you want them
\end_layout

\begin_layout Itemize
Nested Menus so you can have hierarchies
\end_layout

\begin_layout Itemize
Request rewriting (similar to section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:URL-Rewriting"

\end_inset

)
\end_layout

\begin_layout Itemize
State-dependent computations for things like page title, page-specific snippets,
 etc.
\end_layout

\begin_layout Standard
The beauty of SiteMap is that it's very easy to start out with the basic
 functionality and expand it as needed as you grow.
\end_layout

\begin_layout Section
Basic SiteMap Definition
\end_layout

\begin_layout Standard
Let's start with our basic menu for PocketChange
\begin_inset Note Note
status open

\begin_layout Plain Layout
Revise this as needed to match reality
\end_layout

\end_inset

.
 To keep things simple, we'll just define four menu items at the beginning:
\end_layout

\begin_layout Enumerate
The Homepage.
 Depending on whether the user is logged in or not, this page should display
 either the user's entries or a welcome page 
\end_layout

\begin_layout Enumerate
Login and registration links if the user isn't logged in, a logout link
 if they are
\end_layout

\begin_layout Enumerate
View/edit profile if the user is logged in
\end_layout

\begin_layout Enumerate
A help page
\end_layout

\begin_layout Standard
We'll assume that we have the corresponding pages, 
\begin_inset Quotes eld
\end_inset

homepage
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

login
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

logout
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

profile
\begin_inset Quotes erd
\end_inset

 written and functional.
 We'll also assume that the help page(s) reside under the 
\begin_inset Quotes eld
\end_inset

help
\begin_inset Quotes erd
\end_inset

 subdirectory to keep things neat, and that the entry to help is 
\family typewriter
/help/index
\family default
.
\end_layout

\begin_layout Subsection
The Link Class
\begin_inset CommandInset label
LatexCommand label
name "sub:The-Link-Class"

\end_inset


\end_layout

\begin_layout Standard
The Link class
\begin_inset Foot
status open

\begin_layout Plain Layout

\family typewriter
net.liftweb.sitemap.Loc.Link
\end_layout

\end_inset

 is a fundamental part of Menu definitions.
 The Link class contains two parameters: a List[String] of path components,
 and a boolean value that controls whether prefix matching is enabled.
 The path components represent the portion of the URI following your web
 context, split on the 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

 character.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:Link-Path-Components"

\end_inset

 shows how you would use Link to represent the 
\begin_inset Quotes eld
\end_inset

/utils/index
\begin_inset Quotes erd
\end_inset

 page.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Link Path Components
\begin_inset CommandInset label
LatexCommand label
name "lst:Link-Path-Components"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

val myUtilsIndex = new Link(
\begin_inset Quotes eld
\end_inset

utils
\begin_inset Quotes erd
\end_inset

 :: 
\begin_inset Quotes eld
\end_inset

index
\begin_inset Quotes erd
\end_inset

 :: Nil, false)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Prefix matching allows the path components you specify to match any longer
 paths as well.
 Following our first example, if you wanted to match anything under the
 utils directory (say, for access control), you would set the second parameter
 to 
\family typewriter
true
\family default
, as shown in listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:Link-Prefix-Matching"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Link Prefix Matching
\begin_inset CommandInset label
LatexCommand label
name "lst:Link-Prefix-Matching"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

val allUtilPages = new Link(
\begin_inset Quotes eld
\end_inset

utils
\begin_inset Quotes erd
\end_inset

 :: Nil, true)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Clarify trailing slashes and index file behavior (update: David P.
 is working on making this simpler)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
ExtLink
\end_layout

\begin_layout Subsection
Creating Menu Entries
\end_layout

\begin_layout Standard
Menu entries are created using the Menu
\begin_inset Foot
status open

\begin_layout Plain Layout

\family typewriter
net.liftweb.sitemap.Menu
\end_layout

\end_inset

 class, and its corresponding Menu object.
 A Menu, in turn, holds a Loc
\begin_inset Foot
status collapsed

\begin_layout Plain Layout

\family typewriter
net.liftweb.sitemap.Loc
\end_layout

\end_inset

 trait instance, which is where most of the interesting things happen.
 A menu can also hold one or more child menus, which we'll cover in section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Nested-Menus"

\end_inset

.
 Note that the Loc object has several implicit methods that make defining
 Locs easier, so you generally want to import them into scope 
\begin_inset Note Note
status open

\begin_layout Plain Layout
How to best emphasize this (and other notes)?
\end_layout

\end_inset

.
 The simplest way is to import 
\family typewriter
net.liftweb.sitemap.Loc._
\family default
, but you can import specific methods by name if you prefer.
 A Loc can essentially be thought of as a link in the menu, and contains
 four basic items:
\end_layout

\begin_layout Enumerate
The name of the Loc.
 This must be unique across your sitemap because it can be used to look
 up specific Menu items if you customize your menu display (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Using-lift-Menu"

\end_inset

)
\end_layout

\begin_layout Enumerate
The link that the Loc refers to.
 Usually this will refer to a specific page, but Lift allows a single Loc
 to match based on prefix as well (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:The-Link-Class"

\end_inset

)
\end_layout

\begin_layout Enumerate
The text of the menu item.
 This what will be displayed to the user.
 You can use a static string or you can generate it with a function (section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:menu-LinkText"

\end_inset

)
\end_layout

\begin_layout Enumerate
An optional set of parameters that control behavior and appearance of the
 menu item.
 These parameters are covered in sections 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Customizing-Display"

\end_inset

,
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Access-Control"

\end_inset

, 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Validation"

\end_inset

, and 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Page-Specific-Rendering"

\end_inset


\end_layout

\begin_layout Standard
For our example we'll tackle the help page link first, since it's the simplest
 (a static link, essentially).
 The definition is shown in listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:Help-Menu-Definition"

\end_inset

.
 We're assuming that you've imported the Loc implicit methods to keep things
 simple; we'll cover instantiating the classes directly in later sections
 of this chapter.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Help Menu Definition
\begin_inset CommandInset label
LatexCommand label
name "lst:Help-Menu-Definition"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

val helpMenu = Menu(Loc("helpHome",
\end_layout

\begin_layout Plain Layout

                        ("help" :: 
\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset

 :: Nil) -> true,
\end_layout

\begin_layout Plain Layout

                        "Help"))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For our example we've named this menu item 
\begin_inset Quotes eld
\end_inset

helpHome
\begin_inset Quotes erd
\end_inset

.
 The second parameter is a Pair[List[String],Boolean] which converts directly
 to a Link class with the given parameters.
 In our case, by passing in true, we're saying that anything under the help
 directory will also match.
 If you just use a List[String], the implicit conversion is to a Link with
 prefix matching disabled.
 Note that SiteMap won't allow access to any pages that don't match any
 Menu entries
\begin_inset Note Note
status open

\begin_layout Plain Layout
emphasize
\end_layout

\end_inset

, so by doing this we're allowing full access to all of the help files without
 having to specify a menu entry for each.
 The final parameter, 
\begin_inset Quotes eld
\end_inset

Help
\begin_inset Quotes erd
\end_inset

, is the text for the menu link.
 
\end_layout

\begin_layout Subsection
Nested Menus
\begin_inset CommandInset label
LatexCommand label
name "sub:Nested-Menus"

\end_inset


\end_layout

\begin_layout Standard
The Menu class supports child menus simply by passing them in as final construct
or parameters.
 For instance, if we wanted to have an 
\begin_inset Quotes eld
\end_inset

about
\begin_inset Quotes erd
\end_inset

 menu under Help, we could define the menu as shown in listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:Nested-Menu-Definition"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Nested Menu Definition
\begin_inset CommandInset label
LatexCommand label
name "lst:Nested-Menu-Definition"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

val aboutMenu = Menu(Loc(
\begin_inset Quotes eld
\end_inset

about
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

help
\begin_inset Quotes erd
\end_inset

 :: 
\begin_inset Quotes eld
\end_inset

about
\begin_inset Quotes erd
\end_inset

 :: Nil, 
\begin_inset Quotes eld
\end_inset

About
\begin_inset Quotes erd
\end_inset

))
\end_layout

\begin_layout Plain Layout

val helpMenu = Menu(Loc(...as defined above...), aboutMenu)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the menu is rendered it will have a child menu for About.
 Child menus are only rendered by default when the current page matches
 their parent's Loc.
 That means that, for instance the following links would show an 
\begin_inset Quotes eld
\end_inset

About
\begin_inset Quotes erd
\end_inset

 child menu item:
\end_layout

\begin_layout Itemize
/help/index
\end_layout

\begin_layout Itemize
/help/usage
\end_layout

\begin_layout Standard
But the following would not:
\end_layout

\begin_layout Itemize
/index
\end_layout

\begin_layout Itemize
/site/example
\end_layout

\begin_layout Standard
We'll cover how you can customize the rendering of the menus in section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Using-lift-Menu"

\end_inset

.
\end_layout

\begin_layout Subsection
Setting the Global SiteMap
\end_layout

\begin_layout Standard
Once you have all of your menus items defined, you need to set them as your
 SiteMap.
 As usual, we do this in the Boot class by calling the 
\family typewriter
setSiteMap
\family default
 method on LiftRules, as shown in listing ???.
 The setSiteMap method takes a SiteMap object that can be constructed using
 your menu items as arguments.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Setting the SiteMap
\begin_inset CommandInset label
LatexCommand label
name "lst:Setting-the-SiteMap"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

LiftRules.setSiteMap(SiteMap(homeMenu, profileMenu, ...))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When you're dealing with large menus, and in particular when your model
 objects create their own menus (MegaProtoUser, section 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Should this be added to Mapper, or somehow folded in elsewhere?
\end_layout

\end_inset

), then it can be more convenient to define List[Menu] and set that.
 Listing ??? shows this usage.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Using List[Menu] for SiteMap
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

val menus = Menu(Loc(
\begin_inset Quotes eld
\end_inset

HomePage
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Home
\begin_inset Quotes erd
\end_inset

),...) ::
\end_layout

\begin_layout Plain Layout

            ...
\end_layout

\begin_layout Plain Layout

            Menu(...) :: Nil
\end_layout

\begin_layout Plain Layout

LiftRules.setSiteMap(SiteMap(menus : _*))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The key to using List for your menus is to explicitly define the type of
 the parameter as 
\begin_inset Quotes eld
\end_inset

_*
\begin_inset Quotes erd
\end_inset

 so that it's treated as a set of varargs instead of a single argument of
 type List[Menu].
\end_layout

\begin_layout Section
Customizing Display
\begin_inset CommandInset label
LatexCommand label
name "sec:Customizing-Display"

\end_inset


\end_layout

\begin_layout Standard
There are many cases where you may want to change the way that particular
 menu items are displayed.
 For instance, if you're using a Menu item for access control a subdirectory,
 you may not want the menu item displayed at all.
 We'll discuss how you can control appearance, text, etc in this section.
\end_layout

\begin_layout Subsection
Hidden
\begin_inset CommandInset label
LatexCommand label
name "sub:menu-Hidden"

\end_inset


\end_layout

\begin_layout Standard
The Hidden LocParam does exactly what it says: hides the menu item from
 the menu display.
 Other than not showing the item the rest of the menu functionality is still
 fully operable.
 A typical example, shown in listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:Hidden-Menus"

\end_inset

, is to restrict access to a particular subdirectory based on some condition.
 We'll cover the If tag in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:menu-If"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Hidden Menus
\begin_inset CommandInset label
LatexCommand label
name "lst:Hidden-Menus"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

val receiptImages =
\end_layout

\begin_layout Plain Layout

  Menu(Loc(
\begin_inset Quotes eld
\end_inset

receipts
\begin_inset Quotes erd
\end_inset

, 
\end_layout

\begin_layout Plain Layout

          (
\begin_inset Quotes eld
\end_inset

receipts
\begin_inset Quotes erd
\end_inset

 :: Nil) -> true,
\end_layout

\begin_layout Plain Layout

          
\begin_inset Quotes eld
\end_inset

Receipts
\begin_inset Quotes erd
\end_inset

,
\end_layout

\begin_layout Plain Layout

          Hidden, If(...)))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that in this example we've used the implicit conversion from Pair[String,Bo
olean] to Link to make this Menu apply to everything under the 
\begin_inset Quotes eld
\end_inset

receipts
\begin_inset Quotes erd
\end_inset

 directory.
\end_layout

\begin_layout Subsection
Controlling the Menu Text
\begin_inset CommandInset label
LatexCommand label
name "sub:menu-LinkText"

\end_inset


\end_layout

\begin_layout Standard
The LinkText class is what defines the function that will return the text
 to display for a given menu item.
 As we've shown, this can easily be set using the implicit conversion for
 string
\begin_inset Formula $\rightarrow$
\end_inset

LinkText from Loc.
 As an added bonus, the implicit conversion actually takes a by-name String
 for the parameter; that means you can just as easily pass in a function
 to generate the link text as a static string.
 For example, with our profile link we may want to make the link say 
\begin_inset Quotes eld
\end_inset

<username>'s profile
\begin_inset Quotes erd
\end_inset

.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:Customizing-Link-Text"

\end_inset

 shows how we can do it by defining a helper method, assuming that there's
 another method that will return the current user's name (we use the ubiquitous
 Foo object here).
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
Customizing Link Text
\begin_inset CommandInset label
LatexCommand label
name "lst:Customizing-Link-Text"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

def profileText = Foo.currentUser + 
\begin_inset Quotes eld
\end_inset

's profile
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout

val profileMenu = Menu(Loc(
\begin_inset Quotes eld
\end_inset

profile
\begin_inset Quotes erd
\end_inset

, 
\end_layout

\begin_layout Plain Layout

                           
\begin_inset Quotes eld
\end_inset

profile
\begin_inset Quotes erd
\end_inset

 :: Nil,
\end_layout

\begin_layout Plain Layout

                           profileText, ...))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Of course, if you want you can construct the LinkText instance directly,
 just passing in a constructor function that returns a NodeSeq.
 The function that you use with LinkText takes a type-safe input parameter,
 which we'll discuss in more detail in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "ite:Can-specify-your"

\end_inset

.
\end_layout

\begin_layout Subsection
Using <lift:Menu>
\begin_inset CommandInset label
LatexCommand label
name "sub:Using-lift-Menu"

\end_inset


\end_layout

\begin_layout Section
Access Control
\begin_inset CommandInset label
LatexCommand label
name "sec:Access-Control"

\end_inset


\end_layout

\begin_layout Subsection
If
\begin_inset CommandInset label
LatexCommand label
name "sub:menu-If"

\end_inset


\end_layout

\begin_layout Subsection
Unless
\begin_inset CommandInset label
LatexCommand label
name "sub:menu-Unless"

\end_inset


\end_layout

\begin_layout Section
Validation
\begin_inset CommandInset label
LatexCommand label
name "sec:Validation"

\end_inset


\end_layout

\begin_layout Subsection
Test
\begin_inset CommandInset label
LatexCommand label
name "sub:menu-Test"

\end_inset


\end_layout

\begin_layout Section
Page-Specific Rendering
\begin_inset CommandInset label
LatexCommand label
name "sec:Page-Specific-Rendering"

\end_inset


\end_layout

\begin_layout Subsection
The Template Parameter
\end_layout

\begin_layout Subsection
The Snippet and LocSnippets Parameters
\end_layout

\begin_layout Subsection
Title
\end_layout

\begin_layout Section
Writing Your Own Loc
\end_layout

\begin_layout Itemize
Can handle all of what LocParams do
\end_layout

\begin_deeper
\begin_layout Itemize
Rewriting with type-safe params (rewrite)
\end_layout

\begin_layout Itemize
Template resolution (calcTemplate)
\end_layout

\begin_layout Itemize
Special snippet handling (snippets)
\end_layout

\begin_layout Itemize
Link Text (text)
\end_layout

\begin_layout Itemize
URL (link)
\end_layout

\begin_layout Itemize
Access control (Add your own If/Unless on params)
\end_layout

\end_deeper
\begin_layout Itemize
Can specify your own Params still (params)
\begin_inset CommandInset label
LatexCommand label
name "ite:Can-specify-your"

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Move this label to an appropriate location
\end_layout

\end_inset


\end_layout

\end_body
\end_document
