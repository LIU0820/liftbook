#LyX 1.5.6 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
SiteMap
\end_layout

\begin_layout Standard
SiteMap is a very powerful part of Lift that does essentially what it says:
 provides a map (menu) for your site.
 Of course, if all it did was generate a set of links on your pages we wouldn't
 have a whole chapter dedicated to it.
 SiteMap not only handles the basic menu generation functionality, but it
 also provides:
\end_layout

\begin_layout Itemize
Access control mechanisms that dela not only with whether a menu item is
 visible, but whether the page it points to is accessible
\end_layout

\begin_layout Itemize
Grouping of menu items so that you can easily display portions of menus
 where you want them
\end_layout

\begin_layout Itemize
Nested Menus so you can have hierarchies
\end_layout

\begin_layout Itemize
Request rewriting (similar to section 
\begin_inset LatexCommand ref
reference "sec:URL-Rewriting"

\end_inset

)
\end_layout

\begin_layout Itemize
State-dependent computations for things like page title, page-specific snippets,
 etc.
\end_layout

\begin_layout Standard
The beauty of SiteMap is that it's very easy to start out with the basic
 functionality and expand it as needed as you grow.
\end_layout

\begin_layout Section
Basic SiteMap Definition
\end_layout

\begin_layout Standard
Let's start with our basic menu for PocketChange
\begin_inset Note Note
status open

\begin_layout Standard
Revise this as needed to match reality
\end_layout

\end_inset

.
 To keep things simple, we'll just define four menu items at the beginning:
\end_layout

\begin_layout Enumerate
The Homepage.
 Depending on whether the user is logged in or not, this page should display
 either the user's entries or a welcome page 
\end_layout

\begin_layout Enumerate
Login and registration links if the user isn't logged in, a logout link
 if they are
\end_layout

\begin_layout Enumerate
View/edit profile if the user is logged in
\end_layout

\begin_layout Enumerate
A help page
\end_layout

\begin_layout Standard
We'll assume that we have the corresponding pages, 
\begin_inset Quotes eld
\end_inset

homepage
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

login
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

logout
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

profile
\begin_inset Quotes erd
\end_inset

 written and functional.
 We'll also assume that the help page(s) reside under the 
\begin_inset Quotes eld
\end_inset

help
\begin_inset Quotes erd
\end_inset

 subdirectory to keep things neat, and that the entry to help is 
\family typewriter
/help/index
\family default
.
\end_layout

\begin_layout Subsection
Creating Menu Entries
\end_layout

\begin_layout Standard
Menu entries are created using the Menu
\begin_inset Foot
status open

\begin_layout Standard

\family typewriter
net.liftweb.sitemap.Menu
\end_layout

\end_inset

 class, and its corresponding Menu object.
 A Menu, in turn, holds a Loc
\begin_inset Foot
status collapsed

\begin_layout Standard

\family typewriter
net.liftweb.sitemap.Loc
\end_layout

\end_inset

 trait instance, which is where most of the interesting things happen.
 A menu can also hold one or more child menus, which we'll cover in section
 
\begin_inset LatexCommand ref
reference "sub:Nested-Menus"

\end_inset

.
 Note that the Loc object has several implicit methods
\begin_inset Marginal
status open

\begin_layout Standard
Import Loc implicits
\end_layout

\end_inset

 that make defining Locs easier, so you generally want to import them into
 scope.
 The simplest way is to import 
\family typewriter
net.liftweb.sitemap.Loc._
\family default
, but you can import specific methods by name if you prefer.
 A Loc can essentially be thought of as a link in the menu, and contains
 four basic items:
\end_layout

\begin_layout Enumerate
The name of the Loc.
 This must be unique across your sitemap because it can be used to look
 up specific Menu items if you customize your menu display (section 
\begin_inset LatexCommand ref
reference "sub:Using-lift-Menu"

\end_inset

)
\end_layout

\begin_layout Enumerate
The link that the Loc refers to.
 Usually this will refer to a specific page, but Lift allows a single Loc
 to match based on prefix as well (section 
\begin_inset LatexCommand ref
reference "sub:Link-and-LinkText"

\end_inset

)
\end_layout

\begin_layout Enumerate
The text of the menu item.
 This what will be displayed to the user.
 You can use a static string or you can generate it with a function (section
 
\begin_inset LatexCommand ref
reference "sub:Link-and-LinkText"

\end_inset

)
\end_layout

\begin_layout Enumerate
An optional set of parameters that control behavior and appearance of the
 menu item.
 These parameters are covered in sections 
\begin_inset LatexCommand ref
reference "sec:Customizing-Display"

\end_inset

,
\begin_inset LatexCommand ref
reference "sec:Access-Control"

\end_inset

, 
\begin_inset LatexCommand ref
reference "sec:Validation"

\end_inset

, and 
\begin_inset LatexCommand ref
reference "sec:Page-Specific-Rendering"

\end_inset


\end_layout

\begin_layout Standard
For our example we'll tackle the help page link first, since it's the simplest
 (a static link, essentially):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Standard

\begin_inset Caption

\begin_layout Standard

Help Menu Definition
\begin_inset LatexCommand label
name "lst:Help-Menu-Definition"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

val helpMenu = Menu(Loc("helpHome",
\end_layout

\begin_layout Standard

                        "help" :: Nil,
\end_layout

\begin_layout Standard

                        "Help"))
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Nested Menus
\begin_inset LatexCommand label
name "sub:Nested-Menus"

\end_inset


\end_layout

\begin_layout Subsection
Setting the Global SiteMap
\end_layout

\begin_layout Section
Customizing Display
\begin_inset LatexCommand label
name "sec:Customizing-Display"

\end_inset


\end_layout

\begin_layout Subsection
Hidden
\end_layout

\begin_layout Subsection
Link and LinkText
\begin_inset LatexCommand label
name "sub:Link-and-LinkText"

\end_inset


\end_layout

\begin_layout Subsection
Using <lift:Menu>
\begin_inset LatexCommand label
name "sub:Using-lift-Menu"

\end_inset


\end_layout

\begin_layout Section
Access Control
\begin_inset LatexCommand label
name "sec:Access-Control"

\end_inset


\end_layout

\begin_layout Subsection
If
\end_layout

\begin_layout Subsection
Unless
\end_layout

\begin_layout Section
Validation
\begin_inset LatexCommand label
name "sec:Validation"

\end_inset


\end_layout

\begin_layout Subsection
Test
\end_layout

\begin_layout Section
Page-Specific Rendering
\begin_inset LatexCommand label
name "sec:Page-Specific-Rendering"

\end_inset


\end_layout

\begin_layout Subsection
The Template Parameter
\end_layout

\begin_layout Subsection
The Snippet and LocSnippets Parameters
\end_layout

\begin_layout Subsection
Title
\end_layout

\begin_layout Section
Writing Your Own Loc
\end_layout

\begin_layout Itemize
Can handle all of what LocParams do
\end_layout

\begin_deeper
\begin_layout Itemize
Rewriting with type-safe params (rewrite)
\end_layout

\begin_layout Itemize
Template resolution (calcTemplate)
\end_layout

\begin_layout Itemize
Special snippet handling (snippets)
\end_layout

\begin_layout Itemize
Link Text (text)
\end_layout

\begin_layout Itemize
URL (link)
\end_layout

\begin_layout Itemize
Access control (Add your own If/Unless on params)
\end_layout

\end_deeper
\begin_layout Itemize
Can specify your own Params still (params)
\end_layout

\end_body
\end_document
