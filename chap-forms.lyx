#LyX 1.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Forms in Lift
\begin_inset CommandInset label
LatexCommand label
name "cha:Forms-in-Lift"

\end_inset


\end_layout

\begin_layout Standard
In this chapter we're going to discuss the specifics of how you generate
 and process forms with Lift.
 Besides standard GET/POST form processing, Lift provides Ajax forms (chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:AJAX-and-COMET"

\end_inset

) as well as JSON form processing (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:JSON-forms"

\end_inset

), but we're going to focus on the standard stuff here.
 We're going to assume that you have a general knowledge of basic HTML form
 tags as well as how CGI
\begin_inset Index
status open

\begin_layout Plain Layout
CGI
\end_layout

\end_inset

 form processing works.
\end_layout

\begin_layout Section
Standard Form Elements
\begin_inset CommandInset label
LatexCommand label
name "sec:Standard-Form-Elements"

\end_inset


\end_layout

\begin_layout Standard
Let's start with the basics of Lift form processing.
 A form in lift is usually produced via a snippet that contains the additional
 
\family typewriter
form
\family default
 attribute.
 As we mentioned in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:snippet-tag"

\end_inset

, this attribute takes the values GET and POST, and when present makes the
 snippet code embed the proper form tags around the snippet HTML.
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:An-example-form-template"

\end_inset

 shows an example of a form that we will be discussing throughout this section.
\begin_inset Note Note
status open

\begin_layout Plain Layout
Make more pokcetchangey
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout

An example form template
\begin_inset CommandInset label
LatexCommand label
name "lst:An-example-form-template"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

<lift:Ledger.add form=
\begin_inset Quotes erd
\end_inset

POST
\begin_inset Quotes erd
\end_inset

>
\end_layout

\begin_layout Plain Layout

  <entry:description /> <entry.amount /><br />
\end_layout

\begin_layout Plain Layout

  <entry:submit />
\end_layout

\begin_layout Plain Layout

</lift:Ledger.add>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first thing to understand about Lift's form support is that you don't
 generally use the HTML tags for form elements directly, but rather you
 use generator functions on SHtml
\begin_inset Foot
status open

\begin_layout Plain Layout
net.liftweb.http.SHtml
\end_layout

\end_inset

; the main reason for this is that it allows Lift to set up all of the internal
 plumbing so that you keep your code simple.
 Additionally, we use Lift's binding mechanism (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Binding-Values-in-snippets"

\end_inset

) to 
\begin_inset Quotes eld
\end_inset

attach
\begin_inset Quotes erd
\end_inset

 the form elements in the proper location.
 In our example in listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:An-example-form-template"

\end_inset

 we have bindings for a description field, an amount, and a submit button.
\end_layout

\begin_layout Standard
Our next step is to define the form snippet itself.
 Corresponding to our example template is listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:An-example-form-snippet"

\end_inset

.
 This shows our add method with a few vars to hold the form data and a binding
 to the proper form elements.
 We'll cover the 
\family typewriter
processEntryAdd
\family default
 method in a moment; for now let's look at what we have inside the add method.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout

An example form snippet
\begin_inset CommandInset label
LatexCommand label
name "lst:An-example-form-snippet"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

def add (xhtml : Group) : NodeSeq = {
\end_layout

\begin_layout Plain Layout

  var desc = 
\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout

  var amount = 
\begin_inset Quotes eld
\end_inset

0
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  def processEntryAdd () { ...
 }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  bind(
\begin_inset Quotes eld
\end_inset

entry
\begin_inset Quotes erd
\end_inset

, xhtml,
\end_layout

\begin_layout Plain Layout

       
\begin_inset Quotes eld
\end_inset

description
\begin_inset Quotes erd
\end_inset

 -> SHtml.text(desc, desc = _),
\end_layout

\begin_layout Plain Layout

       
\begin_inset Quotes eld
\end_inset

amount
\begin_inset Quotes erd
\end_inset

 -> SHtml.text(amount, amount = _),
\end_layout

\begin_layout Plain Layout

       
\begin_inset Quotes eld
\end_inset

submit
\begin_inset Quotes erd
\end_inset

 -> SHtml.submit(
\begin_inset Quotes eld
\end_inset

Add
\begin_inset Quotes erd
\end_inset

, processEntryAdd _))
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
First, you may be wondering why we use vars defined inside the method.
 Normally, these vars would be locally scoped (stack-based) and would be
 discarded as soon as the method returns.
 The beauty of Scala and Lift is that the right hand argument of each of
 the SHtml functions is actually a function itself.
 Because these anonymous closures
\begin_inset Index
status open

\begin_layout Plain Layout
closure
\end_layout

\end_inset

 reference variables in local scope, Scala magically transforms them to
 heap variables behind the scenes.
 Lift, in turn, adds the function callbacks for each form element into its
 session state so that when the form is submitted the appropriate closure
 is called and the state is updated.
 This is also why we define the 
\family typewriter
processEntryAdd
\family default
 function inside of the 
\family typewriter
add
\family default
 method: by doing so, the 
\family typewriter
processEntryAdd
\family default
 function 
\emph on
also
\emph default
 has access to the closure variables.
 In our example, we're using the 
\begin_inset Quotes eld
\end_inset

wildcard
\begin_inset Quotes erd
\end_inset

 shorthand to define our functions; our description processing function
 could also be defined as:
\end_layout

\begin_layout LyX-Code
newDesc => description = newDesc
\end_layout

\begin_layout Standard
One important thing to remember, however, is that each new invocation of
 the add method (for each page view) wil get its own unique instance of
 the variables that we've defined.
 That means that if you want to retain values between submission and re-renderin
g of the form, you'll want to use RequestVars instead (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Session-and-Request"

\end_inset

).
 An example would be if you want to do form validation and retain submitted
 values if validation fails, as shown in listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:Using-RequestVars-with-forms"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout

Using RequestVars with forms
\begin_inset CommandInset label
LatexCommand label
name "lst:Using-RequestVars-with-forms"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

object description extends RequestVar(
\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

object amount extends RequestVar(
\begin_inset Quotes eld
\end_inset

0
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

def add (xhtml : Group) : NodeSeq = {
\end_layout

\begin_layout Plain Layout

  def processEntryAdd () =
\end_layout

\begin_layout Plain Layout

    if (amount.toDouble <= 0) {
\end_layout

\begin_layout Plain Layout

      S.error(
\begin_inset Quotes eld
\end_inset

Invalid amount
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Plain Layout

    } else {
\end_layout

\begin_layout Plain Layout

      // process Add
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  bind(
\begin_inset Quotes eld
\end_inset

entry
\begin_inset Quotes erd
\end_inset

, xhtml,
\end_layout

\begin_layout Plain Layout

       
\begin_inset Quotes eld
\end_inset

description
\begin_inset Quotes erd
\end_inset

 -> SHtml.text(description.is, description(_)),
\end_layout

\begin_layout Plain Layout

  ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The next thing to look at is how the form elements are generated.
 We use the SHtml helper object to generate a form element of the appropriate
 type for each variable.
 In our case, we just want text fields for the description and amount, but
 SHtml provides a number of other form element types which we'll be covering
 later in this section.
 Generally, an element generator takes an argument for the initial value
 as well as a function to process the submitted value.
 Usually both of these arguments will be related to a variable, but there's
 nothing stopping you from doing something like
\end_layout

\begin_layout LyX-Code
\begin_inset Quotes eld
\end_inset

description
\begin_inset Quotes erd
\end_inset

 -> SHtml.text(
\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset

, println(
\begin_inset Quotes eld
\end_inset

Description = 
\begin_inset Quotes eld
\end_inset

 + _))
\end_layout

\begin_layout Standard
Finally, our submit function executes the partially applied 
\family typewriter
processEntryAdd
\family default
 function, which through access to the variables we've defined can do whatever
 it needs to do when the submit button is pressed.
\end_layout

\begin_layout Standard
Now that we've covered the basics of forms, we're going to go into a little
 more detail for each form element generator method on SHtml.
 The a method (all 3 variants) as well as the ajax* methods are specific
 to Ajax forms, which are covered in detail in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:AJAX-and-COMET"

\end_inset

.
 We'll be covering the fileUpload method in detail in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:File-Uploads"

\end_inset

.
\end_layout

\begin_layout Subsection
checkbox
\end_layout

\begin_layout Standard
The checkbox method generates a checkbox form element, taking an initial
 Boolean value as well as a function 
\begin_inset Formula $(Boolean)\Rightarrow Any$
\end_inset

 that is called if the checkbox is submitted.
 If you've done a lot of HTML form processing you might wonder how this
 actually occurs, since 
\emph on
an unchecked checkbox is not actually submitted as part of a form
\emph default
.
 Lift works around this by adding a hidden form element for each checkbox
 with the same element name, but with a false value, to ensure that the
 callback function is always called.
 
\end_layout

\begin_layout Standard
Because more than one element is returned by the generator, you can't just
 use the 
\begin_inset Quotes eld
\end_inset

%
\begin_inset Quotes erd
\end_inset

 metadata mechanism 
\begin_inset Note Note
status open

\begin_layout Plain Layout
cross-ref?
\end_layout

\end_inset

 to set attributes on the checkbox element.
 Instead, Lift provides a checkbox_id generator that takes an additional
 Box[String] parameter that will add an id attribute to the form element.
 Additionally, both overloads for checkbox take a final varargs sequence
 of (String,String) so that you can provide any other attributes you'd like.
 For example, listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lst:A-checkbox-example"

\end_inset

 shows a checkbox with an id of 
\begin_inset Quotes eld
\end_inset

snazzy
\begin_inset Quotes erd
\end_inset

 and a special css class.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout

A checkbox example
\begin_inset CommandInset label
LatexCommand label
name "lst:A-checkbox-example"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

SHtml.checkbox(false, if (_) frobnicate(), Full(
\begin_inset Quotes eld
\end_inset

snazzy
\begin_inset Quotes erd
\end_inset

), (
\begin_inset Quotes eld
\end_inset

class
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

woohoo
\begin_inset Quotes erd
\end_inset

))
\end_layout

\end_inset


\end_layout

\begin_layout Section
File Uploads
\begin_inset CommandInset label
LatexCommand label
name "sec:File-Uploads"

\end_inset


\end_layout

\end_body
\end_document
