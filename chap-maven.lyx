#LyX 1.6.0 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\use_default_options false
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\bullet 0 0 6 -1
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
An introduction to Maven
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Maven
\end_layout

\end_inset

 and Project Layout
\begin_inset CommandInset label
LatexCommand label
name "cha:Maven"

\end_inset


\end_layout

\begin_layout Standard
In this chapter we'll discuss the Maven build tool and how Lift uses it.
 We'll also take a brief look at the typical layout of a Lift application.
\end_layout

\begin_layout Standard
http://suereth.blogspot.com/2008/10/maven-for-beginners.html
\end_layout

\begin_layout Standard
http://scala-blogs.org/2008/01/maven-for-scala.html
\end_layout

\begin_layout Section
Maven
\end_layout

\begin_layout Subsection
What is Maven?
\end_layout

\begin_layout Standard
It's a project management tool.
 The Maven site
\end_layout

\begin_layout Subsection
Build Lifecycles
\end_layout

\begin_layout Standard
Maven is built on the concept of lifecycles and there are three that are
 built-in, 
\family typewriter
default, clean
\family default
 and 
\family typewriter
site
\end_layout

\begin_layout Standard
The 
\family typewriter
default
\family default
 lifecycle builds and deploys your project.
 The 
\family typewriter
clean
\family default
 lifecycle cleans compiled objects or anything else that needs to be removed
 or reset.
 Finally, the 
\family typewriter
site
\family default
 lifecycle creates the projects documentation.
\end_layout

\begin_layout Standard
Within each of the lifecycle there are a number of phases.
 Below is a listing of the phases that make up the 
\family typewriter
default
\family default
 lifecycle.
\end_layout

\begin_layout Itemize

\family typewriter
validate
\family default
 - validate the project is correct and all necessary information is available
 
\end_layout

\begin_layout Itemize

\family typewriter
compile
\family default
 - compile the source code of the project 
\end_layout

\begin_layout Itemize

\family typewriter
test
\family default
 - test the compiled source code using a suitable unit testing framework.
 These tests should not require the code be packaged or deployed 
\end_layout

\begin_layout Itemize

\family typewriter
package
\family default
 - take the compiled code and package it in its distributable format, such
 as a JAR.
 
\end_layout

\begin_layout Itemize

\family typewriter
integration-test
\family default
 - process and deploy the package if necessary into an environment where
 integration tests can be run 
\end_layout

\begin_layout Itemize

\family typewriter
verify
\family default
 - run any checks to verify the package is valid and meets quality criteria
 
\end_layout

\begin_layout Itemize

\family typewriter
install
\family default
 - install the package into the local repository, for use as a dependency
 in other projects locally 
\end_layout

\begin_layout Itemize

\family typewriter
deploy
\family default
 - done in an integration or release environment, copies the final package
 to the remote repository for sharing with other developers and projects.
\end_layout

\begin_layout Standard
When you run
\family typewriter
 mvn deploy
\family default
, maven with run through each of these phases, executing the tasks associated
 with them.
 Since 
\family typewriter
deploy
\family default
 is last in the list of tasks, all preceeding tasks will be executed as
 well.
 If you ran 
\family typewriter
mvn package
\family default
, only 
\family typewriter
validate
\family default
, 
\family typewriter
compile
\family default
, 
\family typewriter
test
\family default
 and 
\family typewriter
package
\family default
 will be run.
 Typically, during the development of your Lift application you'll run 
\family typewriter
mvn clean jetty:run
\family default
.
\end_layout

\begin_layout Subsection
Plugins
\end_layout

\begin_layout Standard
Plugins add functionality to the build system.
 Lift is written in Scala, so we need to add the Maven Scala Plugin that
 adds the ability to compile Scala code.
 Below is a snippet from the main pom.xml file for a Lift application.
 You can see the Scala plugin adds a 
\family typewriter
compile
\family default
 and 
\family typewriter
testCompile
\family default
 goal for the build phase.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<plugin>         
\end_layout

\begin_layout Plain Layout

<groupId>org.scala-tools</groupId>         
\end_layout

\begin_layout Plain Layout

<artifactId>maven-scala-plugin</artifactId>         
\end_layout

\begin_layout Plain Layout

<executions>           
\end_layout

\begin_layout Plain Layout

<execution>             
\end_layout

\begin_layout Plain Layout

<goals>               
\end_layout

\begin_layout Plain Layout

<goal>compile</goal>               
\end_layout

\begin_layout Plain Layout

<goal>testCompile</goal>             
\end_layout

\begin_layout Plain Layout

</goals>           
\end_layout

\begin_layout Plain Layout

</execution>         
\end_layout

\begin_layout Plain Layout

</executions>         
\end_layout

\begin_layout Plain Layout

<configuration>           
\end_layout

\begin_layout Plain Layout

<scalaVersion>${scala.version}</scalaVersion>         
\end_layout

\begin_layout Plain Layout

</configuration>       
\end_layout

\begin_layout Plain Layout

</plugin>       
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Dependencies
\end_layout

\begin_layout Standard
Dependency management is one of the more useful features of Maven.
 Below is a declaration of the Jetty dependancy for the default Lift application.
 The details of the specification are straight forward, naming the dependency,
 setting a minimum version and defining the scope, in this case, the 
\family typewriter
test
\family default
 phase is defined.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<dependency>       
\end_layout

\begin_layout Plain Layout

<groupId>org.mortbay.jetty</groupId>       
\end_layout

\begin_layout Plain Layout

<artifactId>jetty</artifactId>       
\end_layout

\begin_layout Plain Layout

<version>[6.1.6,)</version>       
\end_layout

\begin_layout Plain Layout

<scope>test</scope>     
\end_layout

\begin_layout Plain Layout

</dependency> 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Adding a Dependency
\end_layout

\begin_layout Standard
Let's say that you'd like to add a new library and you want Maven to make
 sure you've got the most up-to-date version.
 We're going to add Configgy
\begin_inset Foot
status open

\begin_layout Plain Layout
Configgy's home is http://www.lag.net/configgy/
\end_layout

\end_inset

 as a dependency.
 Configgy is 
\begin_inset Quotes eld
\end_inset

a library for handling config files and logging for a scala daemon.
 The idea is that it should be simple and straightforward, allowing you
 to plug it in and get started quickly, writing small useful daemons without
 entering the shadowy world of java frameworks.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
First we need to tell Maven where we can get Configgy, so in the <repositories>
 section add the following:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<repository> 
\end_layout

\begin_layout Plain Layout

  <id>http://www.lag.net/repo/</id> 
\end_layout

\begin_layout Plain Layout

  <name>http://www.lag.net/repo/</name> 
\end_layout

\begin_layout Plain Layout

  <url>http://www.lag.net/repo/</url> 
\end_layout

\begin_layout Plain Layout

</repository>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Then in the <dependencies> section add:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<dependency> 
\end_layout

\begin_layout Plain Layout

  <groupid>net.lag</groupid> 
\end_layout

\begin_layout Plain Layout

  <artifactid>configgy</artifactid> 
\end_layout

\begin_layout Plain Layout

  <version>[1.2,)</version> 
\end_layout

\begin_layout Plain Layout

</dependency>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That's it, you're done.
 The next time you run Maven for your project, it will pull down the Configgy
 jars into your M2_REPO.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Oh snap, add a section about M2_REPO
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Using Maven with Lift
\end_layout

\begin_layout Standard
As we touched on earlier, the interaction with Maven is generally limited
 with Lift.
 Getting started with either a sample application or starting from scratch
 you will mostly run the command 
\family typewriter
mvn clean jetty:run.

\family default
 This command asks Maven to 
\family typewriter
clean
\family default
 all your compiled classes and then execute the build phases that are pre-requis
ites for the 
\family typewriter
jetty:run
\family default
 goal.
 You can see an example pom.xml file for Jetty here: http://mirrors.ibiblio.org/pub
/mirrors/maven2/org/mortbay/jetty/jetty/6.1.12.rc5/jetty-6.1.12.rc5.pom
\end_layout

\begin_layout Subsection
Further Resources
\end_layout

\begin_layout Itemize
http://maven.apache.org - Home page.
\end_layout

\begin_layout Itemize
http://maven.apache.org/what-is-maven.html - Their definition of Maven.
\end_layout

\begin_layout Itemize
http://maven.apache.org/guides/introduction/introduction-to-the-pom.html -
 Introduction to the pom file.
\end_layout

\begin_layout Itemize
http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Life
cycle_Reference - Introduction to the lifecycles.
\end_layout

\begin_layout Itemize
http://suereth.blogspot.com/2008/10/maven-for-beginners.html - General introduction
 to Maven.
\end_layout

\begin_layout Itemize
http://scala-blogs.org/2008/01/maven-for-scala.html - Introduction to Maven
 for Scala projects.
\end_layout

\begin_layout Itemize
http://mirrors.ibiblio.org/pub/mirrors/maven2/org/mortbay/jetty/jetty/6.1.12.rc5/jett
y-6.1.12.rc5.pom - pom.xml file for Jetty 6.1.12.RC5
\end_layout

\begin_layout Itemize
http://mvnrepository.com/ - Search for plugins and dependancies for your
 application.
 This site is invaluable.
\end_layout

\begin_layout Section
Project Layout
\end_layout

\begin_layout Standard
The directory structure of a Lift application is straight-forward, but we'll
 highlight a few important locations here.
\end_layout

\begin_layout Description
<application_root>/src/main/scala This directory will contain your Scala
 source, such as snippets, model objects, and any libraries you write.
 The subfolder structure follows the traditional Java packaging style.
\end_layout

\begin_layout Description
<application_root>/src/main/webapp All of the static aspects of your application
, such as images, XHTML, JavaScript and CSS will be in this directory.
\end_layout

\begin_layout Description
<application_root>/src/main/webapp/templates-hidden You'll find Lift templates
 are contained here.
 [See LiftViewFirst]
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/dirlayout.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:dirlayout"

\end_inset

Project Directory Layout
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
