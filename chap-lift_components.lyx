#LyX 1.5.6 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
A Detailed Look at Lift User Components
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Standard
Chapter: Components: 
\end_layout

\begin_layout Standard
- in-depth discussion of Snippets and Views, how they work, how to use them
 
\end_layout

\begin_layout Standard
- details and how to use Messages 
\end_layout

\begin_layout Standard
- details of generative SHtml components
\end_layout

\begin_layout Standard
- template tags
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Plan, Draft, Revise, Edit, Format, Happy
\end_layout

\begin_layout Standard
Lift uses a combination of technologies to get the XHTML to the user.
 We'll discuss these methods in this chapter.
\end_layout

\begin_layout Standard
In LiftSession._defaultLiftTagProcessing
\end_layout

\begin_layout Standard
Partials are fun! 
\end_layout

\begin_layout Standard
http://creativekarma.com/ee.php/weblog/comments/scala_function_objects_from_a_java
_perspective/
\end_layout

\begin_layout Standard

\series bold
Well ..
 findTemplate first splits the name argument and does a lookup for that
 path.
 If template is not found then it looks in templates- hidden.
 
\end_layout

\begin_layout Standard
- LiftSession.TemplateFinder: 
\end_layout

\begin_layout Standard
--findAnyTemplate looks up paths, such as (List(
\begin_inset Quotes eld
\end_inset

foo
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

index
\begin_inset Quotes erd
\end_inset

)) , attempt to locate the Template, and returns it if found.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
Can reference Derek's dicussion of Partials in the arch chapter.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Intro
\end_layout

\begin_layout Standard
In this chapter you'll learn about how Lift builds the markup that is sent
 to the browser after a request is made to the application.
 We've touched on the two main methods in the Architecture chapter, Templates
 and Views.
 We'll go a bit deeper in this chapter.
\end_layout

\begin_layout Section
Prerequisites
\end_layout

\begin_layout Standard
Before diving in to this chapter, you should understand how XML is structured
 and how a browser and a server interact in the typical case.
\end_layout

\begin_layout Section

\series bold
Templates
\series default

\begin_inset LatexCommand label
name "sec:Templates"

\end_inset


\end_layout

\begin_layout Standard
As we learned in the previous chapter, the most common User Component is
 the Template.
 A Template is a block of XML that is used as a skeleton of a page.
 Within this sequence of XML there are various Lift-specific tags.
 We will discuss the role of each of the Lift tags later in the chapter.
 Below is an example of a simple Template.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Itemize
Static xml that may embed or surround other templates, and may embed snippets
 (reference tag list) 
\end_layout

\begin_layout Itemize
well-formed XML 
\end_layout

\begin_layout Itemize
Special template-hidden directory not directly accessible 
\end_layout

\begin_layout Itemize
Use of prefixed elements to assist with binding in snippets 
\end_layout

\begin_layout Itemize
Re-cover how templates are located/dispatched 
\end_layout

\begin_layout Itemize
TemplateFinder finds Templates...
 :)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},language=XML,numbers=left,numberstyle={\tiny}"
inline false
status open

\begin_layout Standard

\begin_inset Caption

\begin_layout Standard
Simple Template
\end_layout

\end_inset


\end_layout

\begin_layout Standard

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:lift="http://liftweb.net/">
         
\end_layout

\begin_layout Standard

  <head>                 
\end_layout

\begin_layout Standard

    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
                 
\end_layout

\begin_layout Standard

    <meta name="description" content="" />                 
\end_layout

\begin_layout Standard

    <meta name="keywords" content="" />
\end_layout

\begin_layout Standard

    <title>demo.helloworld:helloworld:1.0-SNAPSHOT</title>               
  
\end_layout

\begin_layout Standard

    <script id="jquery" src="/classpath/jquery.js" type="text/javascript"></scrip
t>         
\end_layout

\begin_layout Standard

  </head>         
\end_layout

\begin_layout Standard

  <body>                 
\end_layout

\begin_layout Standard

    <lift:bind name="content" />                 
\end_layout

\begin_layout Standard

    <lift:Menu.builder />                 
\end_layout

\begin_layout Standard

    <lift:msgs/>         
\end_layout

\begin_layout Standard

  </body> 
\end_layout

\begin_layout Standard

</html>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It appears to be a regular XHTML file but there are a few tags that Lift
 will process and replace, namely, <lift:bind />, <lift:Menu.builder /> and
 <lift:msgs />.
 The content of the tags offer clues to what these tags do and we'll discuss
 the them later in 
\begin_inset LatexCommand ref
reference "sec:Comp-Tags"

\end_inset


\end_layout

\begin_layout Section
Views
\end_layout

\begin_layout Standard
We offered a description of Views in 
\begin_inset LatexCommand ref
reference "sub:View-Processing"

\end_inset

and discussed the differences between a LiftView and an InsecureLiftView.
 To refresh your memory, a LiftView comprises both the code to handle dispatchin
g requests to the appropriate Class and the code in the Class that does
 the work, while an InsecureLiftView does not include the dispatch code,
 so Class-Method resolution is handled by the URL.
 As we pointed out, we'd prefer that you use LiftView.
\end_layout

\begin_layout Description
LiftView - ref Arch + example You do all the work to process and return
 XHTML to the user.
 You still get all the good stuff from a snippet, like dispatch and S and
 url rewriting, but no Templates generally.
 
\end_layout

\begin_layout Standard
Put a code listing in for LiftView
\end_layout

\begin_layout Description
InsecureLiftView - ref Arch + example You do all work and you skip dispatch,
 so class.method resolution happens via the URL.
 If I do /admin/deleteallgoodstuff, that resolves to Admin.deleteallgoodstuff
 and is executed.
\end_layout

\begin_layout Standard
Put a code listing in for InsecureLiftView
\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:Comp-Tags"

\end_inset

Tags
\end_layout

\begin_layout Standard
List of tags that are handled by Lift (stolen from http://liftweb.net/index.php/Li
ftTags, not sure how up-to-date this is) 
\end_layout

\begin_layout Standard
Tag name | example | explanation | notes
\end_layout

\begin_layout Subsection
surround 
\end_layout

\begin_layout Standard

\emph on
Example:
\family typewriter
\emph default
 <lift:surround with="template_name">children</lift:surround>
\end_layout

\begin_layout Standard
Surrounds the child nodes with a named template (located in the <app_root>/webap
p/templates-hidden).
 It is used to apply a unified template to all the page in a site.
 
\end_layout

\begin_layout Standard
Demo example:<lift:surround with="default"> <b>Dude</b>...
 this is my page...
 but it'll appear in your browser in a template.
 </lift:surround> 
\end_layout

\begin_layout Standard
In the target template there must be a <lift:bind /> tag to indicate where
 the contents should be bound.
 Note that you can use multiple surround templates by adding them to the
 /templates-hidden directory.
 For example, you might want to have a separate template for your administrative
 pages.
 In that case, you might add that template as admin.html in the /templates-hidden
 directory and then call it from your other pages using:<lift:surround with="adm
in">page code here</lift:surround>
\end_layout

\begin_layout Standard
Notes: You cannot have a hidden template with the same name as a sub-directory
 of your webapp directory.
 For example, if you had an admin.html template in /templates-hidden, you
 could not also have an admin directory.
 
\end_layout

\begin_layout Subsection
embed 
\end_layout

\begin_layout Standard

\emph on
Example:
\family typewriter
\emph default
 <lift:embed what="template" />
\end_layout

\begin_layout Standard
Uses: Allows you to embed a template within another template (or to access
 a template from a JsCmd such as SetHtml, ModalDialog, etc.)
\end_layout

\begin_layout Standard
Note that incoming requests that contain *-hidden in the request will not
 be serviced, but you can access templates in directories named *-hidden.
 So, you can put AJAX templates in /ajax-templates-hidden in webapps.
\end_layout

\begin_layout Standard
Also, lift's i18n support extends to templates as well, so you can specify
 "/ajax-templates-hidden/welcome" and lift will serve the appropriate localized
 template.
 For example, if the current locale is set to French Canadian lift will
 look for /ajax-templates-hidden/welcome_fr_CA.html, /ajax-templates-hidden/welco
me_fr.html, and /ajax-templates-hidden/welcome.html Demo example:
\end_layout

\begin_layout Standard
<lift:embed what="/ajax-templates-hidden/welcome" />
\end_layout

\begin_layout Standard
Caveats: JavaScript contained in templates rendered via JsCmd (sent in response
 to AJAX requests) will not be executed.
 This includes Comet Widgets.
 
\end_layout

\begin_layout Subsection
comet 
\end_layout

\begin_layout Standard

\emph on
Example:
\family typewriter
\emph default
 <lift:comet type="ClassName" name="optional"/>
\end_layout

\begin_layout Standard
Uses: Defines a block of the XML document that is to be con
\end_layout

\begin_layout Standard
Demo example:
\end_layout

\begin_layout Standard
This:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},language=Java,numbers=left,numberstyle={\tiny}"
inline false
status open

\begin_layout Standard

\begin_inset Caption

\begin_layout Standard
Comet Html template
\end_layout

\end_inset


\end_layout

\begin_layout Standard

<div class="widget">
\end_layout

\begin_layout Standard

  <lift:comet type="Clock">Current Time: 
\end_layout

\begin_layout Standard

    <clk:time>Missing Clock</clk:time>
\end_layout

\begin_layout Standard

  </lift:comet>
\end_layout

\begin_layout Standard

</div>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Will turn into this after processing:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},numbers=left,numberstyle={\tiny}"
inline false
status open

\begin_layout Standard

\begin_inset Caption

\begin_layout Standard
Comet as rendered in the browser
\end_layout

\end_inset


\end_layout

\begin_layout Standard

<div style="text-align: center" class="widget">   
\end_layout

\begin_layout Standard

<span id="LCHVVTE3H5CHZ31L1C2ZEQ_outer">     
\end_layout

\begin_layout Standard

<span id="LCHVVTE3H5CHZ31L1C2ZEQ" lift:when="12">
\end_layout

\begin_layout Standard

  Current Time: 
\end_layout

\begin_layout Standard

  <span id="LCHVVTE3H5CHZ31L1C2ZEQ_timespan">Fri Nov 14 17:29:53 EST 2008</span>
     
\end_layout

\begin_layout Standard

<script>     
\end_layout

\begin_layout Standard

// <![CDATA[     /* JSON Func clk $$ F1226701773224999000_BBP */     
\end_layout

\begin_layout Standard

function F1226701773224999000_BBP(obj) {
\end_layout

\begin_layout Standard

  lift_ajaxHandler('F1226701773224999000_BBP='+ encodeURIComponent(JSON.stringify
(obj)), 
\end_layout

\begin_layout Standard

  null, null);
\end_layout

\begin_layout Standard

}     
\end_layout

\begin_layout Standard

// ]]>     
\end_layout

\begin_layout Standard

</script>
\end_layout

\begin_layout Standard

</span>
\end_layout

\begin_layout Standard

<script>     
\end_layout

\begin_layout Standard

// <![CDATA[     
\end_layout

\begin_layout Standard

var destroy_LCHVVTE3H5CHZ31L1C2ZEQ = function() {}     
\end_layout

\begin_layout Standard

// ]]>     
\end_layout

\begin_layout Standard

</script>     
\end_layout

\begin_layout Standard

</span>     
\end_layout

\begin_layout Standard

</div>  
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Caveats: if you have a <lift:comet /> tag and you're using the tag from
 within sending AJAX stuff back, things might not work well.
 
\end_layout

\begin_layout Subsection
snippet
\begin_inset LatexCommand label
name "sub:snippet-tag"

\end_inset


\end_layout

\begin_layout Standard

\emph on
Example:
\family typewriter
\emph default
 <lift:snippet form="METHOD" type="ClassName:method" multipart="true" />
\end_layout

\begin_layout Standard
The 
\family typewriter
form
\family default
 and 
\family typewriter
multipart
\family default
 attributes are optional.
 If 
\family typewriter
form
\family default
 is included the attribute options are 
\family typewriter
GET
\family default
 and 
\family typewriter
POST.

\family default
 The 
\family typewriter
type
\family default
 attribute resolves to the method call 
\family typewriter
ClassName.method
\family default
.
 The 
\family typewriter
multipart
\family default
 attribute is a boolean.
\end_layout

\begin_layout Standard
Demo example:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},numbers=left,numberstyle={\tiny}"
inline false
status open

\begin_layout Standard

\begin_inset Caption

\begin_layout Standard
Snippet that generates a NodeSeq
\end_layout

\end_inset


\end_layout

\begin_layout Standard

def add(xhtml: Group): NodeSeq =     
\end_layout

\begin_layout Standard

  selectedUser.is.openOr(new User).toForm(Empty, saveUser _) ++ 
\end_layout

\begin_layout Standard

  <tr>     
\end_layout

\begin_layout Standard

    <td><a href="/simple/index.html">Cancel</a></td>     
\end_layout

\begin_layout Standard

    <td><input type="submit" value="Create"/></td>     
\end_layout

\begin_layout Standard

  </tr>
\end_layout

\begin_layout Standard

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},numbers=left,numberstyle={\tiny}"
inline false
status open

\begin_layout Standard

\begin_inset Caption

\begin_layout Standard
Snippet the generates Nodes to bind...
 TODO: Explain the difference better...
\end_layout

\end_inset


\end_layout

\begin_layout Standard

def render(in: NodeSeq): NodeSeq = {     
\end_layout

\begin_layout Standard

  val attr: String = S.attr("name").openOr("N/A")     
\end_layout

\begin_layout Standard

  val value = CountHolder.is(attr)
\end_layout

\begin_layout Standard

  bind("count", in, "value" -> value, 
\end_layout

\begin_layout Standard

    "incr" -> link("/count", () => CountHolder.is(attr) = value + 1, Text("++")),
     
\end_layout

\begin_layout Standard

    "decr" -> link("/count", () => CountHolder.is(attr) = 0 max (value -
 1), Text("--")))   
\end_layout

\begin_layout Standard

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Caveats: 
\end_layout

\begin_layout Standard
More in section 
\begin_inset LatexCommand ref
reference "sec:Snippets"

\end_inset


\end_layout

\begin_layout Section

\series bold
Snippets 
\begin_inset LatexCommand label
name "sec:Snippets"

\end_inset


\end_layout

\begin_layout Standard
Snippets are the most common way of getting markup back to the user.
 A Snippet is a special tag that Lift processes/does stuff with to do something
 more exciting than your normal tag.
 Let's take a quick look at example Snippet:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Standard

\begin_inset Caption

\begin_layout Standard
Sample Snippet in index.html
\end_layout

\end_inset


\end_layout

\begin_layout Standard

<lift:surround with="default" at="content">     
\end_layout

\begin_layout Standard

  <h2>Welcome to your project!</h2>     
\end_layout

\begin_layout Standard

  <p>
\end_layout

\begin_layout Standard

    <!-- This is a snippet tag -->
\end_layout

\begin_layout Standard

    <lift:helloWorld.howdy />
\end_layout

\begin_layout Standard

    <!-- This is also a snippet tag -->
\end_layout

\begin_layout Standard

    <lift:snippet type="helloWorld.howdy" />
\end_layout

\begin_layout Standard

  </p> 
\end_layout

\begin_layout Standard

</lift:surround>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Notice the tag <lift:helloWorld.howdy />, this is a snippet and what it means
 to Lift is to lookup the class 
\family typewriter
helloWorld
\family default
 and execute the method 
\family typewriter
howdy.

\family default
 The method 
\family typewriter
howdy
\family default
 is defined as:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Standard

\begin_inset Caption

\begin_layout Standard
Sample Snippet Definition in HelloWorld.scala
\end_layout

\end_inset


\end_layout

\begin_layout Standard

package org.test.snippet
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

class HelloWorld {   
\end_layout

\begin_layout Standard

  def howdy = <span>Welcome to Your Super Rad Site at {new java.util.Date}</span>
 
\end_layout

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
So what's happening is when Lift is processing the XML contained in index.html
 it will notice the special Lift snippet tag, execute the method and replace
 the tag with the XML generated.
 There's the sequence of transformations:
\end_layout

\begin_layout Standard
The template contains:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Standard

<p><lift:helloWorld.howdy /></p>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The method definition is:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Standard

<p><span>Welcome to Your Super Rad Site at {new java.util.Date}</span></p>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And the final XML sent back to the browser will be:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Standard

<p><span>Welcome toYour Super Rad Site at Tue Nov 18 10:40:55 EST 2008</span></p
> 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Using Snippets and bind you can generate XML in a different way.
\end_layout

\begin_layout Standard
The html template would look like this:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Standard

\begin_inset Caption

\begin_layout Standard
Alternate Snippet Definition
\end_layout

\end_inset


\end_layout

\begin_layout Standard

<lift:surround with="default" at="content">
\end_layout

\begin_layout Standard

  <lift:snippet type="helloWord:simpleForm" form="POST"> 
\end_layout

\begin_layout Standard

    <tr><td>City</td><td><sampleBind:city><input type="text" /></sampleBind:city
></td></tr>
\end_layout

\begin_layout Standard

    <tr><td>Country</td><td><sampleBind:country><input type="text" /></sampleBin
d:country></td></tr> 
\end_layout

\begin_layout Standard

    <tr><td>&nbsp;</td><td><input type="submit" value="Add"/></td></tr>
 
\end_layout

\begin_layout Standard

  </lift:snippet> 
\end_layout

\begin_layout Standard

</lift:surround>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And the method definition would be:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize}"
inline false
status open

\begin_layout Standard

\begin_inset Caption

\begin_layout Standard
Alternate Snippet Method Definition
\end_layout

\end_inset


\end_layout

\begin_layout Standard

package org.test.snippet
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

class HelloWorld {   
\end_layout

\begin_layout Standard

  def myForm(xhtml: Group) = {      
\end_layout

\begin_layout Standard

    var city = ""      
\end_layout

\begin_layout Standard

    var country = ""
\end_layout

\begin_layout Standard

    
\end_layout

\begin_layout Standard

    Helpers.bind("sampleBind", xhtml, 
\end_layout

\begin_layout Standard

      "city" -> SHtml.text(name, name = _),                    
\end_layout

\begin_layout Standard

      "country" -> SHtml.text(country, country = _))
\end_layout

\begin_layout Standard

    }
\end_layout

\begin_layout Standard

  } 
\end_layout

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Stateless Snippets, aka, default Snippets
\end_layout

\begin_layout Standard
All of the above examples showed Stateless snippets, those that execute
 and render a block of XML and send it back to the broswer.
 This is the default type of snippet.
 
\end_layout

\begin_layout Subsection
Stateful Snippets
\end_layout

\begin_layout Standard
Lift also has a the concept of a stateful snippet.
 All of our previous examples, while simple, were stateless.
 That is to say, from request to request, there is no saved state on the
 server-side.
 Stateless snippets are useful in the sense that many requirements for a
 web applications need no state to be preserved as the user moves from page
 to page.
 There are a similar number of cases where we would like to preserve some
 state as the user navigates.
 For example, if you think about a graph that shows your spending for the
 last 3 months.
 You've changed the time span from the default 1 month to 3 months.
 Now you'd like to limit the exspense categories to show only 
\begin_inset Quotes eld
\end_inset

Food.
\begin_inset Quotes erd
\end_inset

 More than likely, you'll want the application to respect the change in
 time-span as well.
 This is a case where keeping a bit of state around will allow you to do
 this.
\end_layout

\begin_layout Standard
Below is an example of a stateful snippet that handles the above example.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
Write and then steal from PocketChange
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Snippet Notes
\end_layout

\begin_layout Standard
There are a few things to mention about snippets that will help.
 If you define a snippet as 
\family typewriter
<lift:CSS />
\family default
 rather than 
\family typewriter
<lift:CSS.show /> 
\family default
Lift will look for the method named 
\family typewriter
render
\family default
 in the class 
\family typewriter
CSS
\family default
.
\end_layout

\begin_layout Standard
Important Functions to trace:
\end_layout

\begin_layout Standard
LiftSession processes all the tags (like snippet, comet, embed, etc) and
 if it matches snippet, then it invokes LiftSession.processSnippet
\end_layout

\begin_layout Standard
LiftSession.processSnippet calls =>
\end_layout

\begin_layout Standard
S.locateSnippet - looks up the snippetname in the LiftRules.snippetTable
\end_layout

\begin_layout Standard
- turns 
\begin_inset Quotes eld
\end_inset

HelloClass.fooMethod
\begin_inset Quotes erd
\end_inset

 into List(
\begin_inset Quotes eld
\end_inset

HelloClass
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

fooMethod
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Standard
What is S.doSnippet all about??
\end_layout

\begin_layout Standard
Stateless and stateful Snippet:
\end_layout

\begin_layout Standard
Stateless are the default type of snippet when generating pages.
 The Class/Method lookup occurs within the statelessDispatchTable 
\begin_inset Note Note
status open

\begin_layout Standard
Confirm.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Stateful Snippets are used as a way to utilize the same snippet instance
 over the same page rendering session.
 This is useful for many events on the web, such as a multi-page form where
 data is is needed throughout the steps or when submitting a form and you'd
 like to keep the values the user has entered in the event of validation
 error.
 
\end_layout

\begin_layout Standard
Stateful Snippets use 
\end_layout

\begin_layout Itemize
Chunks of code that generate pieces of a final output page.
 May themselves generate template code that is interpreted 
\end_layout

\begin_layout Itemize
Generic Scala classes (stateless) 
\end_layout

\begin_layout Itemize
How to deal with state in snippets 
\end_layout

\begin_layout Itemize
RequestVars 
\end_layout

\begin_layout Itemize
SessionVars 
\end_layout

\begin_layout Itemize
StatefulSnippet
\end_layout

\begin_deeper
\begin_layout Itemize
extends DispatchSnippet
\end_layout

\begin_layout Itemize
register and unregister SnippetForClass
\end_layout

\begin_layout Itemize
Register the name of the class for the snippet, 
\end_layout

\begin_layout Itemize
Point is to maintain state across requests
\end_layout

\begin_layout Itemize
Example to illustrate the idea, the guess a number game
\end_layout

\end_deeper
\begin_layout Itemize
Snippet
\end_layout

\begin_deeper
\begin_layout Itemize
type DispatchIt = PartialFunction[String, NodeSeq => NodeSeq]
\end_layout

\begin_layout Itemize
def dispatch: DispatchIt
\end_layout

\end_deeper
\begin_layout Itemize
Using Helpers.bind.
 In particular, cover view vs.
 forms usage 
\end_layout

\begin_layout Itemize
Using Helpers.chooseTemplate for nested templates 
\end_layout

\begin_layout Itemize
Assert the concept of Fragment Generation
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},numbers=left,numberstyle={\tiny}"
inline false
status open

\begin_layout Standard

\begin_inset Caption

\begin_layout Standard
Default Template Listing
\end_layout

\end_inset


\end_layout

\begin_layout Standard

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:lift="http://liftweb.net/">
         
\end_layout

\begin_layout Standard

<head>                 
\end_layout

\begin_layout Standard

<meta http-equiv="content-type" content="text/html; charset=UTF-8" />  
               
\end_layout

\begin_layout Standard

<meta name="description" content="" />                 
\end_layout

\begin_layout Standard

<meta name="keywords" content="" />
\end_layout

\begin_layout Standard

<title>demo.helloworld:helloworld:1.0-SNAPSHOT</title>                 
\end_layout

\begin_layout Standard

<script id="jquery" src="/classpath/jquery.js" type="text/javascript"></script>
         
\end_layout

\begin_layout Standard

</head>         
\end_layout

\begin_layout Standard

<body>
\end_layout

\begin_layout Standard

<!-- 1.
 snippet for default main content -->                
\end_layout

\begin_layout Standard

<lift:bind name="content" /> 
\end_layout

\begin_layout Standard

<!-- 2.
 snippet for class Menu, method builder -->               
\end_layout

\begin_layout Standard

<lift:Menu.builder />                 
\end_layout

\begin_layout Standard

<!-- 3.
 snippet for Lifts Messages, one of the builtin snippets -->
\end_layout

\begin_layout Standard

<lift:msgs/>         
\end_layout

\begin_layout Standard

</body> 
\end_layout

\begin_layout Standard

</html>
\end_layout

\end_inset


\end_layout

\begin_layout Section
Built-in Snippets
\end_layout

\begin_layout Standard
There are a few built-in snippets that offer some standard functionality,
 such as messages and menus.
 We'll go over them here and they'll serve as a nice introduction into Snippets
 in general.
 These builtin Snippets can be overridden by your own code or omitted if
 you like.
 The reason they exist is that most web apps are going to need to offer
 these features anyway.a
\end_layout

\begin_layout Subsection
CSS.scala
\end_layout

\begin_layout Standard
The CSS snippet currently provides a simple way to in the Blueprint CSS
 framework.
 Please see the 
\begin_inset LatexCommand htmlurl
name "BlueprintCSS homepage"
target "http://www.blueprintcss.org/"

\end_inset

 for more details.
\end_layout

\begin_layout LyX-Code
Usage: <lift:CSS.blueprint />
\end_layout

\begin_layout Subsection
Menu.scala
\end_layout

\begin_layout Standard
Reference 1.6, general builder stuff here.
 It's all different now.
\end_layout

\begin_layout LyX-Code
Usage: <lift:Menu.builder />
\end_layout

\begin_layout Subsection
Msg.scala
\end_layout

\begin_layout Standard
A snippet for rendering messages close to other elements, for example validation
 errors on a submission form.
\end_layout

\begin_layout LyX-Code
Usage: 
\end_layout

\begin_layout LyX-Code
<input type="text" value="" name="132746123548765"/>
\end_layout

\begin_layout LyX-Code
<lift:msg id="user_msg" errorClass="error_class" warningClass="warning_class"
 noticeClass="notice_class"/>
\end_layout

\begin_layout Subsection
Msgs.scala
\end_layout

\begin_layout Standard
Default snippet for displaying messages generated from S.error, S.warning
 and S.notice.
\end_layout

\begin_layout LyX-Code
Usage: <lift:msgs />
\end_layout

\begin_layout Section

\series bold
SiteMap 
\begin_inset Note Note
status open

\begin_layout Standard

\series bold
Is Derek handling this?
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
http://groups.google.com/group/liftweb/browse_thread/thread/6c1cd13c3f2f7178?hl=en
#
\end_layout

\begin_deeper
\begin_layout Itemize
dpp redid this whole thing recently.
\end_layout

\end_deeper
\begin_layout Itemize
Performs two primary duties: generates the menu for your site (customizable)
 and performs per-page access control 
\end_layout

\begin_layout Itemize
Cover Menu, Loc objects to define paths and superpaths (my term for paths
 that match anything under them) 
\end_layout

\begin_layout Itemize
Support for grouping via LocGroup object 
\end_layout

\begin_layout Itemize

\series bold
<lift:Menu> snippets: 
\end_layout

\begin_deeper
\begin_layout Itemize
<lift:Menu.group group="...">content</...> (http://groups.google.com/group/liftweb/browse
_thread/thread/5f18df13cd735c51?hl=en#) 
\end_layout

\begin_layout Itemize
<lift:Menu.itemname="...">binding to 
\end_layout

\begin_layout Itemize
Loc("...",) (http://groups.google.com/group/liftweb/browse_thread/thread/dbdf6a17b970
4c99/30f5168e87161f74?hl=en&lnk=gst&q=new+sitemap%2Fmenu+features) 
\end_layout

\begin_layout Itemize
Customizing content and attributes on menus 
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Additional attributes 
\end_layout

\begin_deeper
\begin_layout Itemize
If 
\end_layout

\begin_layout Itemize
Unless 
\end_layout

\begin_layout Itemize
Test 
\end_layout

\begin_layout Itemize
Title 
\end_layout

\begin_layout Itemize
Finding the current Loc for a page (RequestState.location) 
\end_layout

\end_deeper
\begin_layout Section

\series bold
Views 
\end_layout

\begin_layout Standard
As discussed a template is a page that is built with both a static component
 and a dynamic component.
 Lift offers the option to generate a page entirely from scala code.
 This is accomplished by using a LiftView.
 
\end_layout

\begin_layout Standard
There are two types of views, InsecureLiftView and LiftView.
\end_layout

\begin_layout Standard
With an InsecureLiftView if you have a URI such as /foo/bar, Lift will look
 for the class foo and execute the method bar.
 This is discouraged as a malicious user could simply type /foo/deleteWorld
 and if that method exists it will be executed.
\end_layout

\begin_layout Standard
The recommended method is to use LiftView instead.
 LiftView has all the same security measures as Snippets in that you must
 build a dispatch list and define that if the user hits /foo/index, that
 is mapped to Foo.render.
 You get control over what method is executed when.
\end_layout

\begin_layout Quotation
Why should you use a View instead of a Template? Building an RSS or Atom
 feed.
 Building a pure XML response.
\end_layout

\begin_layout Itemize
Chunks of code intended to generate a complete page 
\end_layout

\begin_layout Itemize
Can be shoehorned to process template code via processSurroundAndInclude
 
\end_layout

\begin_layout Itemize
Re-cover how views are located/dispatched 
\end_layout

\begin_layout Itemize
Path-based (/my/view) 
\end_layout

\begin_layout Itemize
addDispatchBefore/After 
\end_layout

\begin_layout Itemize
What are the use cases for snippets vs.
 views?
\end_layout

\begin_layout Section
SHtml Generators
\end_layout

\begin_layout Standard
def mapFunc(in: AFuncHolder): String = mapFunc(
\begin_inset Quotes eld
\end_inset

F
\begin_inset Quotes erd
\end_inset

 + System.nanoTime + 
\begin_inset Quotes eld
\end_inset

_
\begin_inset Quotes erd
\end_inset

 + randomString(3), in)
\end_layout

\begin_layout Standard
def mapFunc(name: String, inf: AFuncHolder): String = {
\end_layout

\begin_layout Standard
addFunctionMpa(name, inf)
\end_layout

\begin_layout Standard
name
\end_layout

\begin_layout Standard
}
\end_layout

\begin_layout Description
swappable A swappable visual element.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Standard

\begin_inset Caption

\begin_layout Standard
swappable example
\end_layout

\end_inset


\end_layout

\begin_layout Standard

def renderSwappable = {      
\end_layout

\begin_layout Standard

  swappable(<span>Click to edit: <span id='the_text'></span></span>,   
  
\end_layout

\begin_layout Standard

    ajaxText("", v => DisplayMessage("messages", Text("You entered some
 text: "+v), 4 seconds, 1 second)        
\end_layout

\begin_layout Standard

    & SetHtml("the_text", Text(v))))  
\end_layout

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Description
ajaxButton An <input type=
\begin_inset Quotes erd
\end_inset

button
\begin_inset Quotes erd
\end_inset

> with onClick connected to an AjaxCall
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},language=Java,numbers=left,numberstyle={\tiny}"
inline false
status open

\begin_layout Standard

\begin_inset Caption

\begin_layout Standard
ajaxButton example
\end_layout

\end_inset


\end_layout

\begin_layout Standard

def renderAjaxButton(in: NodeSeq): NodeSeq = SHtml.ajaxButton("Validate",
 () => {   
\end_layout

\begin_layout Standard

  LoginStuff(true)   
\end_layout

\begin_layout Standard

  S.notice("Your session is validated")   
\end_layout

\begin_layout Standard

  RedirectTo("/login/index")   
\end_layout

\begin_layout Standard

})
\end_layout

\end_inset


\end_layout

\begin_layout Description
a An <a> tag with a function associated with it : <lift:a hey={key}>{body}</lift
>
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Standard

 a(() => {cnt = cnt + 1; SetHtml("cnt_id", Text( cnt.toString))}, <span>Click
 me to increase the count (currently <span id='cnt_id'>0</span>)</span>)
  
\end_layout

\end_inset


\end_layout

\begin_layout Description
span A <span> with onClick connected to a JsCmd.
 span(body, cmd)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Standard

<span onclick={cmd.toJsCmd}>{body}</span>
\end_layout

\end_inset


\end_layout

\begin_layout Description
select A <select></select>
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Standard

def renderSelect(in: NodeSeq): NodeSeq = {
\end_layout

\begin_layout Standard

  select(List(String, String), Full(defaultValue), FunctionToDoSomething)
\end_layout

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Description
text An <input type=
\begin_inset Quotes erd
\end_inset

text
\begin_inset Quotes erd
\end_inset

>
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Standard

def renderText(in: NodeSeq): NodeSeq = {
\end_layout

\begin_layout Standard

  text("This is the default text", FunctionToDoSomething)
\end_layout

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Description
textarea A <textarea>
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Standard

def renderTextarea(in: NodeSeq): NodeSeq = {
\end_layout

\begin_layout Standard

  textarea("This is the default text", FunctionToDoSomething)
\end_layout

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Description
link Create an anchor tag around a body Xhtml fragment.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Standard

def link(to: String, func: () => Any, body: NodeSeq): Elem
\end_layout

\begin_layout Standard

generates
\end_layout

\begin_layout Standard

<a href={to + "">{body}</a>
\end_layout

\end_inset


\end_layout

\begin_layout Description
multiselect A <select multiple=
\begin_inset Quotes erd
\end_inset

true
\begin_inset Quotes erd
\end_inset

>
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Standard

def multiSelect(opts: Seq[(String, String)], deflt: Seq[String], func: String
 => Any): Elem
\end_layout

\begin_layout Standard

generates
\end_layout

\begin_layout Standard

<select multiple="true" name={mapFunc(func)}>{opts.flatMap(o => (<option
 value={o._1}>{0._2}</option>) % selected(deflt.contains(o._1)))}</select>
\end_layout

\end_inset


\end_layout

\begin_layout Description
radio An <input type=
\begin_inset Quotes erd
\end_inset

radio
\begin_inset Quotes erd
\end_inset

>
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Standard

def radio(opts: Seq[String], deflt: Can[String], func: String => Any): Elem
\end_layout

\begin_layout Standard

generates
\end_layout

\begin_layout Standard

<input type="radio" name={name} value={v} />
\end_layout

\end_inset


\end_layout

\begin_layout Description
submit An <input type=
\begin_inset Quotes erd
\end_inset

submit
\begin_inset Quotes erd
\end_inset

>
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Standard

def submit(value: String, func: () => Any): Elem
\end_layout

\begin_layout Standard

generates
\end_layout

\begin_layout Standard

<input type="submit" name={mapFunc(func))} />
\end_layout

\end_inset


\end_layout

\begin_layout Description
hidden A hidden form element
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Standard

def hidden(func: () => Any): Elem
\end_layout

\begin_layout Standard

generates
\end_layout

\begin_layout Standard

<input type="hidden" name={mapFunc(func))} />
\end_layout

\end_inset


\end_layout

\begin_layout Description
password An <input type=
\begin_inset Quotes erd
\end_inset

password
\begin_inset Quotes erd
\end_inset

> 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Standard

def password(value: String, func: String => Any): Elem
\end_layout

\begin_layout Standard

generates
\end_layout

\begin_layout Standard

<input type="password" name={mapFunc(func))} />
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Explaining mapFunc:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Standard

/** Associates a name with a function impersonated by AFuncHolder.
 These are basically functions    
\end_layout

\begin_layout Standard

* that are executed when a request contains the 'name' request parameter.
    */   
\end_layout

\begin_layout Standard

def addFunctionMap(name: String, value: AFuncHolder) = _functionMap.value
 += (name -> value)
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

/** * Maps a function with an random generated and name */ 
\end_layout

\begin_layout Standard

def mapFunc(in: AFuncHolder): String = mapFunc("F"+System.nanoTime+"_"+randomStri
ng(3), in)
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

/** * Similar with addFunctionMap but also returns the name.
 */ 
\end_layout

\begin_layout Standard

def mapFunc(name: String, inf: AFuncHolder): String = { 
\end_layout

\begin_layout Standard

  addFunctionMap(name, inf) 
\end_layout

\begin_layout Standard

  name 
\end_layout

\begin_layout Standard

}
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard

Do I need to explain the functionMap that is built per session?
\end_layout

\end_inset


\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
In this chapter you learned how Lift produces the markup that is sent to
 the browser.
 Using Templates in conjunction with Snippets or Views.
\end_layout

\begin_layout Section
To Write
\end_layout

\begin_layout Itemize
SiteMap matching and access control - New Loc/Menu stuff
\end_layout

\begin_layout Itemize
template or view matched? 
\end_layout

\begin_layout Itemize
recursive processing of template and any snippets contained therein 
\end_layout

\begin_layout Itemize
direct processing of view 
\end_layout

\begin_layout Itemize
LiftViewFirst - http://wiki.liftweb.net/index.php/Lift_View_First
\end_layout

\begin_layout Itemize
Error handling - Msgs and handling exceptions
\end_layout

\begin_layout Section
Debugging Junk
\end_layout

\begin_layout Standard
S.locateSnippet: Looking for: Menu.title 
\end_layout

\begin_layout Standard
S.locateSnippet: Processed: List(Menu, title) 
\end_layout

\begin_layout Standard
ProcessSnippet cls: Menu 
\end_layout

\begin_layout Standard
ProcessSnippet method: title 
\end_layout

\begin_layout Standard
Looking for snippet: Menu 
\end_layout

\begin_layout Standard
S.locateSnippet: Looking for: CSS.blueprint 
\end_layout

\begin_layout Standard
S.locateSnippet: Processed: List(CSS, blueprint) 
\end_layout

\begin_layout Standard
ProcessSnippet cls: CSS 
\end_layout

\begin_layout Standard
ProcessSnippet method: blueprint 
\end_layout

\begin_layout Standard
Looking for snippet: CSS 
\end_layout

\begin_layout Standard
S.locateSnippet: Looking for: CSS.fancyType 
\end_layout

\begin_layout Standard
S.locateSnippet: Processed: List(CSS, fancyType) 
\end_layout

\begin_layout Standard
ProcessSnippet cls: CSS 
\end_layout

\begin_layout Standard
ProcessSnippet method: fancyType 
\end_layout

\begin_layout Standard
Looking for snippet: CSS 
\end_layout

\begin_layout Standard
S.locateSnippet: Looking for: menu.builder 
\end_layout

\begin_layout Standard
S.locateSnippet: Processed: List(menu, builder) 
\end_layout

\begin_layout Standard
ProcessSnippet cls: menu 
\end_layout

\begin_layout Standard
ProcessSnippet method: builder 
\end_layout

\begin_layout Standard
Looking for snippet: menu 
\end_layout

\begin_layout Standard
S.locateSnippet: Looking for: Msgs 
\end_layout

\begin_layout Standard
S.locateSnippet: Processed: List(Msgs) 
\end_layout

\begin_layout Standard
ProcessSnippet cls: Msgs 
\end_layout

\begin_layout Standard
ProcessSnippet method: render
\end_layout

\end_body
\end_document
