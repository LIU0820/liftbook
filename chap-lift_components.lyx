#LyX 1.5.6 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
A Detailed Look at Lift User Components
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
Chapter: Components: 
\end_layout

\begin_layout Standard
- in-depth discussion of Snippets and Views, how they work, how to use them
 
\end_layout

\begin_layout Standard
- details and how to use Messages 
\end_layout

\begin_layout Standard
- details of generative SHtml components
\end_layout

\begin_layout Standard
- template tags
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Plan, Draft, Revise, Edit, Format, Happy
\end_layout

\begin_layout Standard
My Notes, since I don't know this yet.:
\end_layout

\begin_layout Standard
Templates contain snippets
\end_layout

\begin_layout Standard
Snippets come in various types
\end_layout

\begin_layout Standard
Lift uses a combination of technologies to get the XHTML to the user.
 We'll discuss these methods in ths chapter.
\end_layout

\begin_layout Standard
In LiftSession._defaultLiftTagProcessing
\end_layout

\begin_layout Standard
Partials are fun! http://creativekarma.com/ee.php/weblog/comments/scala_function_o
bjects_from_a_java_perspective/
\end_layout

\begin_layout Standard

\series bold
Well ..
 findTemplate first splits the name argument and does a lookup for that
 path.
 If template is not found then it looks in templates- hidden.
 
\end_layout

\begin_layout Standard
- LiftSession.TemplateFinder: 
\end_layout

\begin_layout Standard
--findAnyTemplate looks up paths, such as (List(
\begin_inset Quotes eld
\end_inset

foo
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

index
\begin_inset Quotes erd
\end_inset

)) , attempt to locate the Template, and returns it if found.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Standard
Can reference Derek's dicussion of Partials in the arch chapter.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Intro
\end_layout

\begin_layout Standard
In this chapter you'll learn about how Lift builds the markup that is sent
 to the browser after a request is made to the application.
\end_layout

\begin_layout Section
Prerequisites
\end_layout

\begin_layout Standard
Before diving in to this chapter, you should understand how XML is structured
 and how a browser and a server interact in the typical case.
\end_layout

\begin_layout Section

\series bold
Templates
\series default

\begin_inset LatexCommand label
name "sec:Templates"

\end_inset


\end_layout

\begin_layout Standard
The most common User Component is the Template.
 A Template is static XHTML that is used as a skeleton of a page.
 Within this sequence of XML there are various Lift-specific tags called
 Snippets, which are discussed later in the chapter.
\end_layout

\begin_layout Itemize
Static xml that may embed or surround other templates, and may embed snippets
 (reference tag list) 
\end_layout

\begin_layout Itemize
well-formed XML 
\end_layout

\begin_layout Itemize
Special template-hidden directory not directly accessible 
\end_layout

\begin_layout Itemize
Use of prefixed elements to assist with binding in snippets 
\end_layout

\begin_layout Itemize
Re-cover how templates are located/dispatched 
\end_layout

\begin_layout Itemize
TemplateFinder finds Templates...
 :)
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},language=XML,numbers=left,numberstyle={\tiny}"
inline false
status open

\begin_layout Standard

\begin_inset Caption

\begin_layout Standard
Simple Template
\end_layout

\end_inset


\end_layout

\begin_layout Standard

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:lift="http://liftweb.net/">
         
\end_layout

\begin_layout Standard

  <head>                 
\end_layout

\begin_layout Standard

    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
                 
\end_layout

\begin_layout Standard

    <meta name="description" content="" />                 
\end_layout

\begin_layout Standard

    <meta name="keywords" content="" />
\end_layout

\begin_layout Standard

    <title>demo.helloworld:helloworld:1.0-SNAPSHOT</title>               
  
\end_layout

\begin_layout Standard

    <script id="jquery" src="/classpath/jquery.js" type="text/javascript"></scrip
t>         
\end_layout

\begin_layout Standard

  </head>         
\end_layout

\begin_layout Standard

  <body>                 
\end_layout

\begin_layout Standard

    <lift:bind name="content" />                 
\end_layout

\begin_layout Standard

    <lift:Menu.builder />                 
\end_layout

\begin_layout Standard

    <lift:msgs/>         
\end_layout

\begin_layout Standard

  </body> 
\end_layout

\begin_layout Standard

</html>
\end_layout

\end_inset


\end_layout

\begin_layout Section
Views
\end_layout

\begin_layout Description
LiftView - ref Arch + example You do all the work to process and return
 XHTML to the user.
 You still get all the good stuff from a snippet, like dispatch and S and
 url rewriting, but no Templates generally.
 
\end_layout

\begin_layout Description
InsecureLiftView - ref Arch + example You do all work and you skip dispatch,
 so class.method resolution happens via the URL.
 If I do /admin/deleteallgoodstuff, that resolves to Admin.deleteallgoodstuff
 and is executed.
\end_layout

\begin_layout Section
Tags
\end_layout

\begin_layout Standard
List of tags that are handled by Lift (stolen from http://liftweb.net/index.php/Li
ftTags, not sure how up-to-date this is) 
\end_layout

\begin_layout Standard
Tag name | example | explanation | notes
\end_layout

\begin_layout Subsection
surround 
\end_layout

\begin_layout Standard

\family typewriter
<lift:surround with="template_name">children</lift:surround> 
\end_layout

\begin_layout Standard
Surrounds the child nodes with a named template (located in the <app_root>/webap
p/templates-hidden).
 It is used to apply a unified template to all the page in a site.
 
\end_layout

\begin_layout Standard
Demo example:<lift:surround with="default"> <b>Dude</b>...
 this is my page...
 but it'll appear in your browser in a template.
 </lift:surround> 
\end_layout

\begin_layout Standard
In the target template there must be a <lift:bind /> tag to indicate where
 the contents should be bound.
 Note that you can use multiple surround templates by adding them to the
 /templates-hidden directory.
 For example, you might want to have a separate template for your administrative
 pages.
 In that case, you might add that template as admin.html in the /templates-hidden
 directory and then call it from your other pages using:<lift:surround with="adm
in">page code here</lift:surround>
\end_layout

\begin_layout Standard
Notes: You cannot have a hidden template with the same name as a sub-directory
 of your webapp directory.
 For example, if you had an admin.html template in /templates-hidden, you
 could not also have an admin directory.
 
\end_layout

\begin_layout Subsection
embed 
\end_layout

\begin_layout Standard

\family typewriter
<lift:embed what="template" />
\end_layout

\begin_layout Standard
Uses: Allows you to embed a template within another template (or to access
 a template from a JsCmd such as SetHtml, ModalDialog, etc.)
\end_layout

\begin_layout Standard
Note that incoming requests that contain *-hidden in the request will not
 be serviced, but you can access templates in directories named *-hidden.
 So, you can put AJAX templates in /ajax-templates-hidden in webapps.
\end_layout

\begin_layout Standard
Also, lift's i18n support extends to templates as well, so you can specify
 "/ajax-templates-hidden/welcome" and lift will serve the appropriate localized
 template.
 For example, if the current locale is set to French Canadian lift will
 look for /ajax-templates-hidden/welcome_fr_CA.html, /ajax-templates-hidden/welco
me_fr.html, and /ajax-templates-hidden/welcome.html Demo example:
\end_layout

\begin_layout Standard
<lift:embed what="/ajax-templates-hidden/welcome" />
\end_layout

\begin_layout Standard
Caveats: JavaScript contained in templates rendered via JsCmd (sent in response
 to AJAX requests) will not be executed.
 This includes Comet Widgets.
 
\end_layout

\begin_layout Subsection
comet 
\end_layout

\begin_layout Standard

\family typewriter
<lift:comet type="ClassName" name="optional"/>
\end_layout

\begin_layout Standard
Uses:
\end_layout

\begin_layout Standard
Demo example:
\end_layout

\begin_layout Standard
Caveats: if you have a <lift:comet /> tag and you're using the tag from
 within sending AJAX stuff back, things might not work well.
 
\end_layout

\begin_layout Subsection
snippet
\begin_inset LatexCommand label
name "sub:snippet-tag"

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
<lift:snippet form="METHOD" type="ClassName:method" multipart="true" />
\end_layout

\begin_layout Standard
form and multipart are optional.
\end_layout

\begin_layout Standard
form types are GET | POST
\end_layout

\begin_layout Standard
type resolves to the method call ClassName.method
\end_layout

\begin_layout Standard
multipart is a boolean
\end_layout

\begin_layout Standard
Demo example:
\end_layout

\begin_layout Standard
Caveats: 
\end_layout

\begin_layout Standard
More in section 
\begin_inset LatexCommand ref
reference "sec:Snippets"

\end_inset


\end_layout

\begin_layout Section

\series bold
Snippets 
\begin_inset LatexCommand label
name "sec:Snippets"

\end_inset


\end_layout

\begin_layout Itemize
Chunks of code that generate pieces of a final output page.
 May themselves generate template code that is interpreted 
\end_layout

\begin_layout Itemize
Generic Scala classes (stateless) 
\end_layout

\begin_layout Itemize
How to deal with state in snippets 
\end_layout

\begin_layout Itemize
RequestVars 
\end_layout

\begin_layout Itemize
SessionVars 
\end_layout

\begin_layout Itemize
StatefulSnippet
\end_layout

\begin_deeper
\begin_layout Itemize
extends DispatchSnippet
\end_layout

\begin_layout Itemize
register and unregister SnippetForClass
\end_layout

\begin_layout Itemize
Register the name of the class for the snippet, 
\end_layout

\begin_layout Itemize
Point is to maintain state across requests
\end_layout

\begin_layout Itemize
Example to illustrate the idea, the guess a number game
\end_layout

\end_deeper
\begin_layout Itemize
Snippet
\end_layout

\begin_deeper
\begin_layout Itemize
type DispatchIt = PartialFunction[String, NodeSeq => NodeSeq]
\end_layout

\begin_layout Itemize
def dispatch: DispatchIt
\end_layout

\end_deeper
\begin_layout Itemize
Using Helpers.bind.
 In particular, cover view vs.
 forms usage 
\end_layout

\begin_layout Itemize
Using Helpers.chooseTemplate for nested templates 
\end_layout

\begin_layout Itemize
Assert the concept of Fragment Generation
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small},numbers=left,numberstyle={\tiny}"
inline false
status open

\begin_layout Standard

\begin_inset Caption

\begin_layout Standard
Default Template Listing
\end_layout

\end_inset


\end_layout

\begin_layout Standard

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:lift="http://liftweb.net/">
         
\end_layout

\begin_layout Standard

<head>                 
\end_layout

\begin_layout Standard

<meta http-equiv="content-type" content="text/html; charset=UTF-8" />  
               
\end_layout

\begin_layout Standard

<meta name="description" content="" />                 
\end_layout

\begin_layout Standard

<meta name="keywords" content="" />
\end_layout

\begin_layout Standard

<title>demo.helloworld:helloworld:1.0-SNAPSHOT</title>                 
\end_layout

\begin_layout Standard

<script id="jquery" src="/classpath/jquery.js" type="text/javascript"></script>
         
\end_layout

\begin_layout Standard

</head>         
\end_layout

\begin_layout Standard

<body>
\end_layout

\begin_layout Standard

<!-- 1.
 snippet for default main content -->                
\end_layout

\begin_layout Standard

<lift:bind name="content" /> 
\end_layout

\begin_layout Standard

<!-- 2.
 snippet for class Menu, method builder -->               
\end_layout

\begin_layout Standard

<lift:Menu.builder />                 
\end_layout

\begin_layout Standard

<!-- 3.
 snippet for Lifts Messages, one of the builtin snippets -->
\end_layout

\begin_layout Standard

<lift:msgs/>         
\end_layout

\begin_layout Standard

</body> 
\end_layout

\begin_layout Standard

</html>
\end_layout

\end_inset


\end_layout

\begin_layout Section
Built-in Snippets
\end_layout

\begin_layout Standard
There are a few built-in snippets that offer some standards functionality,
 such as messages and menus.
 We'll go over them here and they'll serve as a nice introduction into Snippets
 in general.
 These builtin Snippets can be overridden by your own code or omitted if
 you like.
 The reason they exist is that most web apps are going to need to offer
 these features anyway.a
\end_layout

\begin_layout Subsection
CSS.scala
\end_layout

\begin_layout Standard
The CSS snippet currently provides a simple way to in the Blueprint CSS
 framework.
 Please see the 
\begin_inset LatexCommand htmlurl
name "BlueprintCSS homepage"
target "http://www.blueprintcss.org/"

\end_inset

 for more details.
\end_layout

\begin_layout LyX-Code
Usage: <lift:CSS.blueprint />
\end_layout

\begin_layout Subsection
Menu.scala
\end_layout

\begin_layout Standard
Reference 1.6, general builder stuff here.
 It's all different now.
\end_layout

\begin_layout LyX-Code
Usage: <lift:Menu.builder />
\end_layout

\begin_layout Subsection
Msg.scala
\end_layout

\begin_layout Standard
A snippet for rendering messages close to other elements, for example validation
 errors on a submission form.
\end_layout

\begin_layout LyX-Code
Usage: <input type="text" value="" name="132746123548765"/><lift:msg id="user_ms
g" errorClass="error_class" warningClass="warning_class" noticeClass="notice_cla
ss"/>
\end_layout

\begin_layout Subsection
Msgs.scala
\end_layout

\begin_layout Standard
Default snippet for displaying messages generated from S.error, S.warning
 and S.notice.
\end_layout

\begin_layout LyX-Code
Usage: <lift:msgs />
\end_layout

\begin_layout Section

\series bold
SiteMap 
\begin_inset Note Note
status open

\begin_layout Standard

\series bold
Is Derek handling this?
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
http://groups.google.com/group/liftweb/browse_thread/thread/6c1cd13c3f2f7178?hl=en
#
\end_layout

\begin_deeper
\begin_layout Itemize
dpp redid this whole thing recently.
\end_layout

\end_deeper
\begin_layout Itemize
Performs two primary duties: generates the menu for your site (customizable)
 and performs per-page access control 
\end_layout

\begin_layout Itemize
Cover Menu, Loc objects to define paths and superpaths (my term for paths
 that match anything under them) 
\end_layout

\begin_layout Itemize
Support for grouping via LocGroup object 
\end_layout

\begin_layout Itemize

\series bold
<lift:Menu> snippets: 
\end_layout

\begin_deeper
\begin_layout Itemize
<lift:Menu.group group="...">content</...> (http://groups.google.com/group/liftweb/browse
_thread/thread/5f18df13cd735c51?hl=en#) 
\end_layout

\begin_layout Itemize
<lift:Menu.itemname="...">binding to 
\end_layout

\begin_layout Itemize
Loc("...",) (http://groups.google.com/group/liftweb/browse_thread/thread/dbdf6a17b970
4c99/30f5168e87161f74?hl=en&lnk=gst&q=new+sitemap%2Fmenu+features) 
\end_layout

\begin_layout Itemize
Customizing content and attributes on menus 
\end_layout

\end_deeper
\begin_layout Itemize

\series bold
Additional attributes 
\end_layout

\begin_deeper
\begin_layout Itemize
If 
\end_layout

\begin_layout Itemize
Unless 
\end_layout

\begin_layout Itemize
Test 
\end_layout

\begin_layout Itemize
Title 
\end_layout

\begin_layout Itemize
Finding the current Loc for a page (RequestState.location) 
\end_layout

\end_deeper
\begin_layout Section

\series bold
Views 
\end_layout

\begin_layout Standard
As discussed a template is a page that is built with both a static component
 and a dynamic component.
 Lift offers the option to generate a page entirely from scala code.
 This is accomplished by using a LiftView.
 
\end_layout

\begin_layout Standard
There are two types of views, InsecureLiftView and LiftView.
\end_layout

\begin_layout Standard
With an InsecureLiftView if you have a URI such as /foo/bar, Lift will look
 for the class foo and execute the method bar.
 This is discouraged as a malicious user could simply type /foo/deleteWorld
 and if that method exists it will be executed.
\end_layout

\begin_layout Standard
The recommended method is to use LiftView instead.
 LiftView has all the same security measures as Snippets in that you must
 build a dispatch list and define that if the user hits /foo/index, that
 is mapped to Foo.render.
 You get control over what method is executed when.
\end_layout

\begin_layout Quotation
Why should you use a View instead of a Template? Building an RSS or Atom
 feed.
 Building a pure XML response.
\end_layout

\begin_layout Itemize
Chunks of code intended to generate a complete page 
\end_layout

\begin_layout Itemize
Can be shoehorned to process template code via processSurroundAndInclude
 
\end_layout

\begin_layout Itemize
Re-cover how views are located/dispatched 
\end_layout

\begin_layout Itemize
Path-based (/my/view) 
\end_layout

\begin_layout Itemize
addDispatchBefore/After 
\end_layout

\begin_layout Itemize
What are the use cases for snippets vs.
 views?
\end_layout

\begin_layout Section
SHtml Generators
\end_layout

\begin_layout Description
ajaxButton An <input type=
\begin_inset Quotes erd
\end_inset

button
\begin_inset Quotes erd
\end_inset

> with onClick connected to an AjaxCall
\end_layout

\begin_layout Description
a An <a> tag with a function associated with it
\end_layout

\begin_layout Description
span A <span> with onClick connected to a JsCmd.
\end_layout

\begin_layout Description
toggleKids 
\end_layout

\begin_layout Description
ajaxCheckbox An <input type=
\begin_inset Quotes erd
\end_inset

checkbox
\begin_inset Quotes erd
\end_inset

> with onClick connected to an AjaxCall
\end_layout

\begin_layout Description
ajaxSelect 
\end_layout

\begin_layout Description
select A <select>
\end_layout

\begin_layout Description
text An <input type=
\begin_inset Quotes erd
\end_inset

text
\begin_inset Quotes erd
\end_inset

>
\end_layout

\begin_layout Description
ajaxText 
\end_layout

\begin_layout Description
textarea A <textarea>
\end_layout

\begin_layout Description
link Create an anchor tag around a body Xhtml fragment.
\end_layout

\begin_layout Description
select A <select> tag
\end_layout

\begin_layout Description
untrustedSelect A <select> tag that has no test to see whether or not the
 value was in the list.
 This is commonly used for dynamic select lists.
\end_layout

\begin_layout Description
multiselect A <select multiple=
\begin_inset Quotes erd
\end_inset

true
\begin_inset Quotes erd
\end_inset

>
\end_layout

\begin_layout Description
fileholder An <input type=
\begin_inset Quotes erd
\end_inset

file
\begin_inset Quotes erd
\end_inset

>
\end_layout

\begin_layout Description
radio An <input type=
\begin_inset Quotes erd
\end_inset

radio
\begin_inset Quotes erd
\end_inset

>
\end_layout

\begin_layout Description
submit An <input type=
\begin_inset Quotes erd
\end_inset

submit
\begin_inset Quotes erd
\end_inset

>
\end_layout

\begin_layout Description
hidden A hidden form element
\end_layout

\begin_layout Description
password An <input type=
\begin_inset Quotes erd
\end_inset

password
\begin_inset Quotes erd
\end_inset

> 
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
In this chapter you learned how Lift produces the markup that is sent to
 the browser.
 Using Templates in conjunction with Snippets or Views.
\end_layout

\begin_layout Section
To Write
\end_layout

\begin_layout Itemize
SiteMap matching and access control - New Loc/Menu stuff
\end_layout

\begin_layout Itemize
template or view matched? 
\end_layout

\begin_layout Itemize
recursive processing of template and any snippets contained therein 
\end_layout

\begin_layout Itemize
direct processing of view 
\end_layout

\begin_layout Itemize
LiftViewFirst - http://wiki.liftweb.net/index.php/Lift_View_First
\end_layout

\begin_layout Itemize
Error handling - Msgs and handling exceptions
\end_layout

\end_body
\end_document
