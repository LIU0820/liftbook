#LyX 1.5.6 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Helper Methods
\end_layout

\begin_layout Section
Planning
\end_layout

\begin_layout Itemize
Can/Empty/Full/Failure
\end_layout

\begin_layout Itemize
Good description with examples: http://groups.google.com/group/liftweb/browse_thre
ad/thread/1a0808688d7923b2
\end_layout

\begin_deeper
\begin_layout Itemize
Richer alternative to Scala's Option/None/Some
\end_layout

\begin_layout Itemize
openOr examples
\end_layout

\begin_layout Itemize
map examples
\end_layout

\begin_layout Itemize
pass - function with side effects
\end_layout

\begin_layout Itemize
run - function with default
\end_layout

\begin_layout Itemize
Using and/or chaining Failure objects
\end_layout

\begin_layout Itemize
var c = Can[String]
\end_layout

\begin_layout Itemize
c match { case Full(value) => //do something with the value case _ =>
\end_layout

\begin_layout Itemize
} 
\end_layout

\begin_layout Itemize
OR
\end_layout

\begin_layout Itemize
object passedAuthor extends RequestVar[Can[Author]](Empty)
\end_layout

\begin_layout Itemize
def view (xhtml : NodeSeq) : NodeSeq = passedAuthor.map({ author => // do
 bind, etc here and return a NodeSeq
\end_layout

\begin_layout Itemize
}) openOr Text("Invalid author") 
\end_layout

\end_deeper
\begin_layout Itemize
Time/date formatting
\end_layout

\begin_layout Itemize
String formatting and utilities
\end_layout

\begin_layout Itemize
Encryption and hashing
\end_layout

\begin_layout Itemize
List helpers
\end_layout

\begin_layout Itemize
Binding
\end_layout

\begin_layout Itemize
URL modification
\end_layout

\begin_layout Itemize
IO Helpers
\end_layout

\begin_layout Itemize
tryo wrappers
\end_layout

\begin_layout Section
Writing
\end_layout

\begin_layout Subsection*
Can (or Scala's Option class on steroids)
\end_layout

\begin_layout Standard
Option Class in Scala:
\end_layout

\begin_layout Standard
Scala has a standard type named Option for optional values.
 Such a value can be of two forms: It can be of the form Some(x) where x
 is the actual value.
 Or it can be the None object, which represents a missing value.
 Optional values are produced by some of the standard operations on Scala’s
 collections.
 For instance, the get method of a Map produces Some(value) if a value correspon
ding to a given key has been found, or None if the given key is not deﬁned
 in the Map.
 Here’s an example: scala> val capitals = | Map("France" -> "Paris", "Japan"
 -> "Tokyo") capitals: scala.collection.immutable.Map[java.lang.String,java.lang.String
]
\end_layout

\begin_layout Standard
scala> capitals get "France" res21: Option[java.lang.String] = Some(Paris)
 scala> capitals get "North Pole" res22: Option[java.lang.String] = None The
 most common way to take optional values apart is through a pattern match.
 For instance: scala> def show(x: Option[String]) = x match { | case Some(s)
 => s | case None => "?" | } show: (Option[String])String scala> show(capitals
 get "Japan") res23: String = Tokyo scala> show(capitals get "North Pole")
 res24: String = ? 
\end_layout

\begin_layout Standard
- Things are either Some(value) or None.
\end_layout

\begin_layout Standard
- Show Map example
\end_layout

\begin_layout LyX-Code
val authors = Map(
\begin_inset Quotes eld
\end_inset

a
\begin_inset Quotes erd
\end_inset

 -> 
\begin_inset Quotes eld
\end_inset

A
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

b
\begin_inset Quotes erd
\end_inset

 -> 
\begin_inset Quotes eld
\end_inset

B
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout LyX-Code
authors.get(
\begin_inset Quotes eld
\end_inset

a
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout LyX-Code
Some(
\begin_inset Quotes eld
\end_inset

A
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout LyX-Code
authors.get(
\begin_inset Quotes eld
\end_inset

Monkey
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout LyX-Code
None
\end_layout

\begin_layout Standard
- .map on collections is the typical way to get values out
\end_layout

\begin_layout Standard
util/Can.scala
\end_layout

\begin_layout LyX-Code
def confirmDelete {     
\end_layout

\begin_layout LyX-Code
  (for (val id <- param("id");     // get the ID           
\end_layout

\begin_layout LyX-Code
        val user <- User.find(id)) // find the user                     
                                                           
\end_layout

\begin_layout LyX-Code
  yield {          
\end_layout

\begin_layout LyX-Code
    user.delete_!                   
\end_layout

\begin_layout LyX-Code
    notice("User deleted")          
\end_layout

\begin_layout LyX-Code
    redirectTo("/simple/index.html")        
\end_layout

\begin_layout LyX-Code
  }) getOrElse {error("User not found"); redirectTo("/simple/index.html")}
    
\end_layout

\begin_layout LyX-Code
}
\end_layout

\end_body
\end_document
