#LyX 1.5.6 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Helper Methods
\end_layout

\begin_layout Section
Planning
\end_layout

\begin_layout Itemize
Can/Empty/Full/Failure
\end_layout

\begin_layout Itemize
Good description with examples: http://groups.google.com/group/liftweb/browse_thre
ad/thread/1a0808688d7923b2
\end_layout

\begin_deeper
\begin_layout Itemize
openOr examples
\end_layout

\begin_layout Itemize
map examples
\end_layout

\begin_layout Itemize
pass - function with side effects
\end_layout

\begin_layout Itemize
run - function with default
\end_layout

\begin_layout Itemize
Using and/or chaining Failure objects
\end_layout

\begin_layout Itemize
OR
\end_layout

\begin_layout Itemize
object passedAuthor extends RequestVar[Can[Author]](Empty)
\end_layout

\begin_layout Itemize
def view (xhtml : NodeSeq) : NodeSeq = passedAuthor.map({ author => // do
 bind, etc here and return a NodeSeq
\end_layout

\begin_layout Itemize
}) openOr Text("Invalid author") 
\end_layout

\end_deeper
\begin_layout Itemize
Time/date formatting
\end_layout

\begin_layout Itemize
String formatting and utilities
\end_layout

\begin_layout Itemize
Encryption and hashing
\end_layout

\begin_layout Itemize
List helpers
\end_layout

\begin_layout Itemize
Binding
\end_layout

\begin_layout Itemize
URL modification
\end_layout

\begin_layout Itemize
IO Helpers
\end_layout

\begin_layout Itemize
tryo wrappers
\end_layout

\begin_layout Section
Writing
\end_layout

\begin_layout Subsection
Can (or Scala's Option class on steroids)
\end_layout

\begin_layout Standard
The Can Type is a utility that is built on top of Scala's Option Type, so
 let's take a quick look at Option first.
\end_layout

\begin_layout Standard
The Option class allows for typesafe method of dealing with a situation
 where you may or may not have a result.
 Option has two values, either Some(value) where value is actually the value
 and None which is used to represent nothing.
\end_layout

\begin_layout Standard
A typical example for Option is outlined using Scala's Map type.
 Below you'll see a definition of a Map, a successful attempt to get the
 value of key 
\begin_inset Quotes eld
\end_inset

a
\begin_inset Quotes erd
\end_inset

 and an attempt to get the value of key 
\begin_inset Quotes eld
\end_inset

i
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Notice that when there was an existing key-value pair for 
\begin_inset Quotes eld
\end_inset

a
\begin_inset Quotes erd
\end_inset

 the value was returned as Some(A) and when we asked for the value of key
 
\begin_inset Quotes eld
\end_inset

i
\begin_inset Quotes erd
\end_inset

 we received None.
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
scala> val cap = Map("a" -> "A", "b" -> "B") 
\end_layout

\begin_layout LyX-Code
cap: scala.collection.immutable.Map[java.lang.String,java.lang.String] = Map(a
 -> A, b -> B)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
scala> cap.get("a")  
\end_layout

\begin_layout LyX-Code
res1: Option[java.lang.String] = Some(A)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
scala> cap.get("i") 
\end_layout

\begin_layout LyX-Code
res2: Option[java.lang.String] = None 
\end_layout

\begin_layout Standard
Getting the value out of an Option is usually handled via map, for example:
\end_layout

\begin_layout LyX-Code
def prettyPrint(foo: Option[String]): String = foo match {
\end_layout

\begin_layout LyX-Code
  case Some(x) => x
\end_layout

\begin_layout LyX-Code
  case None => 
\begin_inset Quotes eld
\end_inset

Nothing found.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
Which would be used in conjunction with the previous code:
\end_layout

\begin_layout LyX-Code
scala> prettyPrint(cap.get("a")) 
\end_layout

\begin_layout LyX-Code
res7: String = A
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
scala> prettyPrint(cap.get("i")) 
\end_layout

\begin_layout LyX-Code
res8: String = Nothing found.
\end_layout

\begin_layout Standard
Lift's Can extends Option with a few ideas, mainly the fact that you can
 add a message about why a Can is Empty.
 Empty corresponds to Option's None and Full to Option's Some.
 So you can pattern match against a Can like so:
\end_layout

\begin_layout LyX-Code
a match {
\end_layout

\begin_layout LyX-Code
  Full(author) => Text(
\begin_inset Quotes eld
\end_inset

I found the author 
\begin_inset Quotes eld
\end_inset

 + author.niceName)
\end_layout

\begin_layout LyX-Code
  Empty => Text(
\begin_inset Quotes eld
\end_inset

No author by that name.
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout LyX-Code
  Failure(message, _, _) => Text(
\begin_inset Quotes eld
\end_inset

Nothing found due to 
\begin_inset Quotes eld
\end_inset

 + message) // message may be something like 
\begin_inset Quotes eld
\end_inset

Database disconnected.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
def confirmDelete {     
\end_layout

\begin_layout LyX-Code
  (for (val id <- param("id");     // get the ID           
\end_layout

\begin_layout LyX-Code
        val user <- User.find(id)) // find the user                     
                                                           
\end_layout

\begin_layout LyX-Code
  yield {          
\end_layout

\begin_layout LyX-Code
    user.delete_!                   
\end_layout

\begin_layout LyX-Code
    notice("User deleted")          
\end_layout

\begin_layout LyX-Code
    redirectTo("/simple/index.html")        
\end_layout

\begin_layout LyX-Code
  }) getOrElse {error("User not found"); redirectTo("/simple/index.html")}
    
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
openOr example
\end_layout

\begin_layout LyX-Code
lazy val UserBio = UserBio.find(By(UserBio.id, id)) openOr (new UserBio)
\end_layout

\begin_layout LyX-Code
def view (xhtml: NodeSeq): NodeSeq = passedAuthor.map({ author => // do bind,
 etc here and return a NodeSeq}) openOr Text("Invalid author") 
\end_layout

\begin_layout Subsection
Time/date formatting
\end_layout

\begin_layout Standard
Various time span and general convenience functions.
\end_layout

\begin_layout Subsection
String formatting and utilities
\end_layout

\begin_layout Standard
Capitailize, spliting, parsing strings to numbers, cleaning non-standard
 chars.
\end_layout

\begin_layout Subsection
Encryption and hashing
\end_layout

\begin_layout Standard
Blowfish en/decrypt, md5, sha256, hexEncode
\end_layout

\begin_layout Subsection
List helpers
\end_layout

\begin_layout Standard
Rotation, enumsToList, join, or
\end_layout

\begin_layout Subsection
Binding
\end_layout

\begin_layout Standard
Binding for templates
\end_layout

\begin_layout Subsection
URL modification
\end_layout

\begin_layout Standard
encode, decode, add params, check appropriate file extensions.
\end_layout

\begin_layout Subsection
IO Helpers
\end_layout

\begin_layout Standard
Reading files and Streams, executing files
\end_layout

\begin_layout Subsection
tryo wrappers
\end_layout

\begin_layout Standard
Addition to try blocks, allows the developer to ignore certain exceptions.
\end_layout

\begin_layout Subsection
Regular Expressions
\end_layout

\end_body
\end_document
