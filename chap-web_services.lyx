#LyX 1.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\use_default_options false
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Web Services
\end_layout

\begin_layout Standard
\begin_inset Box Framed
position "t"
hor_pos "c"
has_inner_box 0
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
This chapter is still under active development.
 The contents will change.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Why add an API to your Web Application?
\end_layout

\begin_layout Standard
Many web applications today now offer an API
\begin_inset Foot
status open

\begin_layout Plain Layout
Application Programming Interface
\end_layout

\end_inset

 that allows others to extend the functionality of the site.
 An API is a set of exposed functions that are meant to allow 3rd parties
 to reuse elements of the application.
 There a number of sites that catalog the available APIs, such as ProgrammableWe
b
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.programmableweb.com/
\end_layout

\end_inset

.
 An example of a site that has combined the GoogleMaps and Flickr APIs is
 FlickrVision.com/
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "http://flickrvision.com/"
target "http://flickrvision.com/"

\end_inset


\end_layout

\end_inset

.
 FlickrVision that allows users to visualize where in the world recent photos
 have been taken by combining the geolocation information embedded in the
 photos and the mapping system of GoogleMaps.
 This is just one example of an API mashup, there are countless other examples.
\end_layout

\begin_layout Standard
We're going to focus on what it takes to offer a simple RESTful web api
 for PocketChange.
\end_layout

\begin_layout Section
A Little Bit about HTTP
\end_layout

\begin_layout Standard
While building our web service it's going to be helpful to know a few things
 about HTTP
\begin_inset Foot
status open

\begin_layout Plain Layout
Hypertext Transfer Protocol
\end_layout

\end_inset

 requests and responses.
 If you're comfortable with the Request-Response cycle and their details
 then feel free to jump to 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:What-is-REST?"

\end_inset

 and get down to business.
\end_layout

\begin_layout Standard
A simplification of how the web works is that clients, typically web browsers,
 send HTTP Requests to servers, which respond with HTTP Responses.
 Let's take a look at an exchange between a client and a server.
\end_layout

\begin_layout Standard
We're going to send a GET request to the URI http://demo.liftweb.net/ using
 the cURL utility.
 We'll enable the dumping of the header information and we get the following
 result:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
]> curl -v http://demo.liftweb.net/ 
\end_layout

\begin_layout LyX-Code
* About to connect() to demo.liftweb.net port 80 (#0) 
\end_layout

\begin_layout LyX-Code
*   Trying 64.27.11.183...
 connected 
\end_layout

\begin_layout LyX-Code
* Connected to demo.liftweb.net (64.27.11.183) port 80 (#0) 
\end_layout

\begin_layout LyX-Code
> GET / HTTP/1.1 
\end_layout

\begin_layout LyX-Code
> User-Agent: curl/7.19.0 (i386-apple-darwin9.5.0) libcurl/7.19.0 zlib/1.2.3 
\end_layout

\begin_layout LyX-Code
> Host: demo.liftweb.net 
\end_layout

\begin_layout LyX-Code
> Accept: */*
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And then the corresponding response from the server follows:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
< HTTP/1.1 200 OK 
\end_layout

\begin_layout LyX-Code
< Server: nginx/0.6.32 
\end_layout

\begin_layout LyX-Code
< Date: Tue, 24 Mar 2009 20:52:55 GMT 
\end_layout

\begin_layout LyX-Code
< Content-Type: text/html 
\end_layout

\begin_layout LyX-Code
< Connection: keep-alive 
\end_layout

\begin_layout LyX-Code
< Expires: Mon, 26 Jul 1997 05:00:00 GMT 
\end_layout

\begin_layout LyX-Code
< Set-Cookie: JSESSIONID=5zrn24obipm5;Path=/ 
\end_layout

\begin_layout LyX-Code
< Content-Length: 8431 
\end_layout

\begin_layout LyX-Code
< Cache-Control: no-cache; private; no-store; must-revalidate; max-stale=0;
 post-check=0; pre-check=0; max-age=0 
\end_layout

\begin_layout LyX-Code
< Pragma: no-cache 
\end_layout

\begin_layout LyX-Code
< X-Lift-Version: 0.11-SNAPSHOT 
\end_layout

\begin_layout LyX-Code
<  
\end_layout

\begin_layout LyX-Code
<?xml version="1.0" encoding="UTF-8"?> 
\end_layout

\begin_layout LyX-Code
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/T
R/xhtml1/DTD/xhtml1-transitional.dtd"> <html xmlns:lift="http://liftweb.net"
 xmlns="http://www.w3.org/1999/xhtml"><head>....
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Seems pretty straight-forward, we ask for a resource and the server returns
 it to us.
 Take a look at the HTTP request, we'd like to point out the action, in
 this case a 
\family typewriter

\begin_inset Quotes eld
\end_inset

GET
\begin_inset Quotes erd
\end_inset

, 
\family default
and the
\family typewriter
 
\family default
URI,
\family typewriter
 
\family default
which is 
\begin_inset Quotes eld
\end_inset

http://demo.liftweb.net/
\begin_inset Quotes erd
\end_inset

.
 Actions and addresses are what make the web work.
 You can think of the web as a series of actions on varying resources.
 
\end_layout

\begin_layout Standard
Actions are defined as part of the HTTP standard and we'll use them in our
 API.
 In addition to GET, the other HTTP actions are POST, DELETE, PUT, HEAD,
 OPTIONS.
 You may also see actions referred to as verbs.
 In this chapter we will focus on using GET and PUT in the API.
 
\end_layout

\begin_layout Standard
Just like Requests, Responses come with a few important pieces of information.
 Of note, is the Response Code and the Entity Body.
 In the example above, the Response Code is 
\begin_inset Quotes eld
\end_inset


\family typewriter
200 OK
\family default

\begin_inset Quotes erd
\end_inset

 and the Entity Body is the HTML content of the webpage, which is shown
 as the last two lines starting with 
\begin_inset Quotes eld
\end_inset


\family typewriter
<!DOCTYPE
\family default

\begin_inset Quotes erd
\end_inset

 and truncated.
\end_layout

\begin_layout Standard
This was a quick overview of HTTP but if you'd like to learn more, head
 over to the protocol definition
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.ietf.org/rfc/rfc2616.txt
\end_layout

\end_inset

.
 We wanted to point out a few of the interesting parts of the cycle before
 we got into building a REST API.
\end_layout

\begin_layout Section
What is REST?
\begin_inset CommandInset label
LatexCommand label
name "sec:What-is-REST?"

\end_inset


\end_layout

\begin_layout Standard
Wikipedia defines REST as:
\end_layout

\begin_layout Quotation
[...] a style of software architecture for distributed hypermedia systems such
 as the World Wide Web.
 As such, it is not strictly a method for building "web services".
 The terms "representational state transfer" and "REST" were introduced
 in 2000 in the doctoral dissertation of Roy Fielding
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm
\end_layout

\end_inset

, one of the principal authors of the Hypertext Transfer Protocol (HTTP)
 specification.
 
\end_layout

\begin_layout Quotation
REST strictly refers to a collection of network architecture principles
 which outline how resources are defined and addressed.
 The term is often used in a looser sense to describe any simple interface
 which transmits domain-specific data over HTTP without an additional messaging
 layer such as SOAP or session tracking via HTTP cookies.
 These two meanings can conflict as well as overlap.
 It is possible to design a software system in accordance with Fielding's
 REST architectural style without using HTTP and without interacting with
 the World Wide Web.[2] It is also possible to design simple XML+HTTP interfaces
 which do not conform to REST principles, and instead follow a model of
 remote procedure call.
 The difference between the uses of the term "REST" therefore causes some
 confusion in technical discussions.
 
\end_layout

\begin_layout Standard
There are a couple of ideas that are key in the preceeding definition, first
 is the use of HTTP actions and second is the idea of resources and their
 addressability or URIs.
 REST is an architecture that answers two questions that relate to actions
 and resources.
 They are: what action should occur? and what data shall the action be applied?
 REST answers these questions with what you would expect, HTTP actions and
 URIs.
 
\end_layout

\begin_layout Standard
REST relies on the action of the request to be defined by the HTTP action
 and the resources to be defined in the URI.
 For example, a request like:
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset Quotes eld
\end_inset

GET http://www.pocketchangeapp.com/api/transcation/22
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Standard
tells us we want to get the resource that is addressed by the URI 
\family typewriter
http://www.pocketchangeapp.com/api/transcation/22.
\end_layout

\begin_layout Section
Comparing XML-RPC to REST architectures
\end_layout

\begin_layout Standard
So what is the difference between a RESTful architecture and a traditional
 RPC
\begin_inset Foot
status open

\begin_layout Plain Layout
Remote Procedure Call
\end_layout

\end_inset

 architecture? 
\end_layout

\begin_layout Standard
An RPC appliction is more closely related to traditional development.
 It tends to ignore most of the features offered by HTTP such as the methods.
 Rather, the scoping and data for the request is contained in the body of
 the POST.
 XML-RPC acts like the web for getting things, but breaks from those tenets
 for everything else, by overloading the POST request.
 You will often see the term SOAP when talking about an XML-RPC setup, as
 SOAP allows the developer to define the action and the resource and ignore
 the HTTP details.
\end_layout

\begin_layout Standard
RESTful architectures embrace HTTP and use it to their advantage.
 Since we're using the web, we may as well act like it.
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status open

\begin_layout Section
What is ROA REST? Do I need this????
\end_layout

\begin_layout Plain Layout
The book 
\begin_inset Quotes eld
\end_inset

RESTful Web Services
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
http://oreilly.com/catalog/9780596529260/index.html
\end_layout

\end_inset

 defines an architecture, referred to as 
\begin_inset Quotes eld
\end_inset

Resource Oriented
\begin_inset Quotes erd
\end_inset

 that builds on top of Fielding's original REST definition.
 We mentioned previously that a REST architecture will take advantage of
 the HTTP methods to define the action of the request.
 An ROA also uses HTTP methods and defines the scope of the data being acted
 upon in the URI.
 This combination is the real win for ROA, because of the clarity associated
 with it.
 If you saw 
\begin_inset Quotes eld
\end_inset


\family typewriter
GET http://www.pocketchangeapp.com/api/transcation/22
\family default

\begin_inset Quotes erd
\end_inset

 you would have an excellent idea of what is going to happen.
 In this case, we want to get the details of the transaction with the ID
 of 22.
\end_layout

\begin_layout Plain Layout
What we care about for ROA REST:
\end_layout

\begin_layout Plain Layout

\series bold
Concepts
\end_layout

\begin_layout Enumerate
Resources
\end_layout

\begin_layout Enumerate
Their names (URIs) 
\end_layout

\begin_layout Enumerate
Their representations 
\end_layout

\begin_layout Enumerate
The links between them 
\end_layout

\begin_layout Plain Layout

\series bold
And Properties: 
\end_layout

\begin_layout Enumerate
Addressability 
\end_layout

\begin_layout Enumerate
Statelessness 
\end_layout

\begin_layout Enumerate
Connectedness 
\end_layout

\begin_layout Enumerate
A uniform interface 
\end_layout

\end_inset


\end_layout

\begin_layout Section
A Simple API for PocketChange
\end_layout

\begin_layout Standard
We're going to start out with a simple example.
 We'd like to skip some of the more complex steps of a web service at the
 start, in particular, authorization.
\end_layout

\begin_layout Standard
We're going to model two calls to the server, a GET request that responds
 with the expense details and a PUT to add an expense 
\end_layout

\begin_layout Standard
The URLs will be:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code
A GET request sent to URI: 
\end_layout

\begin_layout LyX-Code
  http://www.pocketchangeapp.com/api/expense/<expense_id> where expense_id
 is the Expense Id
\end_layout

\begin_layout LyX-Code
A PUT request + an XML Body sent to URI:
\end_layout

\begin_layout LyX-Code
  http://www.pocketchangeapp.com/api/expense
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The URLs are almost the same and as we will show, we can pattern-match on
 the type of request in addition to the URI.
\end_layout

\begin_layout Section
Pattern matching for the URLs
\end_layout

\begin_layout Standard
Now that we've discussed our design, let's see the code that will handle
 the routing.
 In the package com.pocketchangeapp.api, we have an object named RestAPI defined
 in com/pocketchangeapp/api/RestAPI.scala.
\end_layout

\begin_layout Standard
The block of code to handle the routing follows:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code
package com.pocketchangeapp.api
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
object RestAPI extends XMLApiHelper {
\end_layout

\begin_layout LyX-Code
  def dispatch: LiftRules.DispatchPF = {     
\end_layout

\begin_layout LyX-Code
    case Req("api" :: "expense" :: eid :: Nil, "", GetRequest) => () =>
 showExpense(eid) 
\end_layout

\begin_layout LyX-Code
    case r @ Req("api" :: "expense" :: Nil, "", PutRequest) => () => addExpense(
r)
\end_layout

\begin_layout LyX-Code
    
\end_layout

\begin_layout LyX-Code
    // Invalid API request - route to our error handler
\end_layout

\begin_layout LyX-Code
    case Req("api" :: x :: Nil, "", _) => failure _ 
\end_layout

\begin_layout LyX-Code
  }
\end_layout

\begin_layout LyX-Code
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The server will now service GET requests with showExpense and will handle
 PUT requests with addExpense.
 One thing to note is we are pattern matching on the Req object and in the
 PUT request, we extract the Req and pass it as a parameter to addExpense.
 This is because we're passing in an XML body with the information for the
 Exspense.
\end_layout

\begin_layout Standard
As we discussed in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Custom-dispatch-func"

\end_inset

 Lift uses dispatch rules to route requests.
 Since we'd like to sit of /api/ and handle all of the requests we're going
 to need to update the dispatch rules.
\end_layout

\begin_layout Standard
This is accomplished by adding the following code into Boot.scala:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code
import com.pocketchangeapp.api
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
class Boot {
\end_layout

\begin_layout LyX-Code
  def boot {
\end_layout

\begin_layout LyX-Code
    ...
\end_layout

\begin_layout LyX-Code
    LiftRules.dispatch.prepend(RestAPI.dispatch) 
\end_layout

\begin_layout LyX-Code
    ...
\end_layout

\begin_layout LyX-Code
  }
\end_layout

\begin_layout LyX-Code
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We'll now be able to intercept incoming requests with 
\begin_inset Quotes eld
\end_inset

/api/
\begin_inset Quotes erd
\end_inset

 as the start of the URI.
\end_layout

\begin_layout Section
API Service Code
\end_layout

\begin_layout Standard
Now that we're handling the API calls, we'll need to write the code to process
 and respond.
 In RestAPI.scala, we'll add:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code
// reacts to the GET Request
\end_layout

\begin_layout LyX-Code
def showExpense(eid: String): LiftResponse = { 
\end_layout

\begin_layout LyX-Code
  val e: Box[NodeSeq] = for(r <- Expense.find(By(Expense.id, eid.toLong)))
 yield { 
\end_layout

\begin_layout LyX-Code
     wrapXmlBody(<operation id="show_expense" success="true">{e.toXML}</operation
>) 
\end_layout

\begin_layout LyX-Code
  }
\end_layout

\begin_layout LyX-Code
  
\end_layout

\begin_layout LyX-Code
  e
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
private def getAccount(e: String, n: String): Account = {     
\end_layout

\begin_layout LyX-Code
val u = User.find(By(User.email, e))         
\end_layout

\begin_layout LyX-Code
val a = Account.findByName(u.open_!, n) match {       
\end_layout

\begin_layout LyX-Code
case acct :: Nil => acct       
\end_layout

\begin_layout LyX-Code
case _ => new Account     
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
    
\end_layout

\begin_layout LyX-Code
a   
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
  
\end_layout

\begin_layout LyX-Code
// reacts to the PUT Request   
\end_layout

\begin_layout LyX-Code
def addExpense(req: Req): LiftResponse = {     
\end_layout

\begin_layout LyX-Code
var tempEmail = ""     
\end_layout

\begin_layout LyX-Code
var tempAccountName = ""
\end_layout

\begin_layout LyX-Code
var expense = new Expense     
\end_layout

\begin_layout LyX-Code
req.xml match {       
\end_layout

\begin_layout LyX-Code
case Full(<expense>{parameters @ _*}</expense>) => {         
\end_layout

\begin_layout LyX-Code
for(parameter <- parameters){ 
\end_layout

\begin_layout LyX-Code
parameter match {           
\end_layout

\begin_layout LyX-Code
case <email>{email}</email> => tempEmail = email.text           
\end_layout

\begin_layout LyX-Code
case <accountName>{name}</accountName> => tempAccountName = name.text   
        
\end_layout

\begin_layout LyX-Code
case <dateOf>{dateof}</dateOf> => expense.dateOf(new java.util.Date(dateof.text))
           
\end_layout

\begin_layout LyX-Code
case <amount>{value}</amount> => expense.amount(BigDecimal(value.text))  
         
\end_layout

\begin_layout LyX-Code
case <desc>{description}</desc> => expense.description(description.text) 
          
\end_layout

\begin_layout LyX-Code
case _ =>         
\end_layout

\begin_layout LyX-Code
}       
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
      try {         
\end_layout

\begin_layout LyX-Code
val currentAccount = getAccount(tempEmail, tempAccountName)         
\end_layout

\begin_layout LyX-Code
expense.account(currentAccount.id.is)
\end_layout

\begin_layout LyX-Code
        
\end_layout

\begin_layout LyX-Code
val (entrySerial,entryBalance) = Expense.getLastExpenseData(currentAccount,
 expense.dateOf)
\end_layout

\begin_layout LyX-Code
        
\end_layout

\begin_layout LyX-Code
expense.account(currentAccount).serialNumber(entrySerial + 1).tags("api").currentBal
ance(entryBalance + expense.amount)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
expense.validate match {           
\end_layout

\begin_layout LyX-Code
case Nil =>             
\end_layout

\begin_layout LyX-Code
Expense.updateEntries(entrySerial + 1, expense.amount.is)             
\end_layout

\begin_layout LyX-Code
expense.save             
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
val newBalance = currentAccount.balance.is + expense.amount.is             
\end_layout

\begin_layout LyX-Code
currentAccount.balance(newBalance).save 
\end_layout

\begin_layout LyX-Code
           
\end_layout

\begin_layout LyX-Code
CreatedResponse(wrapXmlBody(<operation id="add_expense" success="true"></operati
on>), "text/xml")           
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
case _ =>             
\end_layout

\begin_layout LyX-Code
CreatedResponse(wrapXmlBody(<operation id="add_expense" success="false"></operat
ion>), "text/xml")         
\end_layout

\begin_layout LyX-Code
}       
\end_layout

\begin_layout LyX-Code
}       
\end_layout

\begin_layout LyX-Code
catch {         
\end_layout

\begin_layout LyX-Code
case e => Log.error("Could not add expense", e); BadResponse()       
\end_layout

\begin_layout LyX-Code
}     
\end_layout

\begin_layout LyX-Code
}     
\end_layout

\begin_layout LyX-Code
case _ => Log.error("Request was malformed"); BadResponse()     
\end_layout

\begin_layout LyX-Code
}   
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Section
Helper method for the Expense Model Object
\end_layout

\begin_layout Standard
To simplify our lives, we'll add a helper function to our Expense model
 object:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code
// look up the account name for the expense
\end_layout

\begin_layout LyX-Code
private def getAccountName(id: Long): String = {     
\end_layout

\begin_layout LyX-Code
  Account.find(By(Account.id, id)) match {       
\end_layout

\begin_layout LyX-Code
    case Empty => "No Account Name"       
\end_layout

\begin_layout LyX-Code
    case Full(a) => a.name.is     
\end_layout

\begin_layout LyX-Code
  }   
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
// get a list of tags of the form <tag>tagname1</tag><tag>tagname2</tag>
\end_layout

\begin_layout LyX-Code
def showXMLTags: NodeSeq = tags.map(t => <tag>{t.name.is}</tag>)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
// 
\end_layout

\begin_layout LyX-Code
def toXML: NodeSeq = {    
\end_layout

\begin_layout LyX-Code
  val id = "http://www.pocketchangeapp.com/api/expense/" + this.id    
\end_layout

\begin_layout LyX-Code
  val formatter = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")
    
\end_layout

\begin_layout LyX-Code
  val edate = formatter.format(this.dateOf.is)
\end_layout

\begin_layout LyX-Code
    
\end_layout

\begin_layout LyX-Code
  <expense>       
\end_layout

\begin_layout LyX-Code
    <id>{id}</id>       
\end_layout

\begin_layout LyX-Code
    <accountname>{getAccountName(account.is)}</accountname>       
\end_layout

\begin_layout LyX-Code
    <date>{edate}</date>       
\end_layout

\begin_layout LyX-Code
    <description>{description.is}</description>       
\end_layout

\begin_layout LyX-Code
    <amount>{amount.is.toString}</amount>       
\end_layout

\begin_layout LyX-Code
    <tags>{showXMLTags}</tags>     
\end_layout

\begin_layout LyX-Code
  </expense>
\end_layout

\begin_layout LyX-Code
}  
\end_layout

\end_inset


\end_layout

\begin_layout Section
Request and Response Cycle for an API GET 
\end_layout

\begin_layout Standard
TODO: actual model members
\end_layout

\begin_layout Standard
Request:
\end_layout

\begin_layout LyX-Code
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
http://www.pocketchangeapp.com/api/expense/3 GET
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Response: 
\end_layout

\begin_layout LyX-Code
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
<?xml version="1.0" encoding="UTF-8"?> 
\end_layout

\begin_layout Plain Layout
<pca_api operation="expense" success="true" >
\end_layout

\begin_layout Plain Layout
<operation success="true" id="show_expense">
\end_layout

\begin_layout Plain Layout
<expense> 
\end_layout

\begin_layout Plain Layout
<id>http://www.pocketchangeapp.com/api/expense/3</id> 
\end_layout

\begin_layout Plain Layout
<accountname>Home</accountname> 
\end_layout

\begin_layout Plain Layout
<date>2009-03-26T00:00:00Z</date> 
\end_layout

\begin_layout Plain Layout
<description>MacHeist Apps</description> 
\end_layout

\begin_layout Plain Layout
<amount>35.00</amount> 
\end_layout

\begin_layout Plain Layout
<tags> 
\end_layout

\begin_layout Plain Layout
<tag>software</tag>
\end_layout

\begin_layout Plain Layout
<tag>apps</tag>
\end_layout

\begin_layout Plain Layout
<tag>mac</tag> 
\end_layout

\begin_layout Plain Layout
</tags> 
\end_layout

\begin_layout Plain Layout
</expense>
\end_layout

\begin_layout Plain Layout
</operation>
\end_layout

\begin_layout Plain Layout
</events_api> 
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Section
Request and Response Cycle for an API PUT
\end_layout

\begin_layout Standard
TODO: actual model members
\end_layout

\begin_layout Standard
Request:
\end_layout

\begin_layout LyX-Code
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
http://www.pocketchangeapp.com/api/expense - PUT - addEntry(request) + XML
 Body
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Request Body: 
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code
<expense> 
\end_layout

\begin_layout LyX-Code
  <email>tyler.weir@pocketchangeapp.com</email> 
\end_layout

\begin_layout LyX-Code
  <accountName>Home</accountName> 
\end_layout

\begin_layout LyX-Code
  <dateOf>2009/03/26</dateOf> 
\end_layout

\begin_layout LyX-Code
  <amount>45.00</amount> 
\end_layout

\begin_layout LyX-Code
  <desc>I buy food</desc> 
\end_layout

\begin_layout LyX-Code
</expense>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Response:
\end_layout

\begin_layout LyX-Code
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code
HTTP/1.1 201 Created
\end_layout

\begin_layout LyX-Code
<?xml version="1.0" encoding="UTF-8"?> <pca_api><operation success="true"
 id="add_expense"></operation></pca_api> 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Extending the API to return Atom
\end_layout

\begin_layout Standard
If you'd like to return your data in a different format, you'll have to
 do two things.
 First define the helper or helpers, we'll add 
\family typewriter
toJSON
\family default
 and 
\family typewriter
toAtom
\family default
 as a sample.
 Second, update the dispatch rules to allow users to request the alternate
 data formats.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code
def toAtom = {    
\end_layout

\begin_layout LyX-Code
  val id = "http://www.pocketchangeapp.com/api/expense/" + this.id    
\end_layout

\begin_layout LyX-Code
  val formatter = new  SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")    
\end_layout

\begin_layout LyX-Code
  val edate = formatter.format(this.dateOf.is)
\end_layout

\begin_layout LyX-Code
  
\end_layout

\begin_layout LyX-Code
  <entry xmlns="http://www.w3.org/2005/Atom">     
\end_layout

\begin_layout LyX-Code
    <expense>       
\end_layout

\begin_layout LyX-Code
      <id>{id}</id>       
\end_layout

\begin_layout LyX-Code
      <accountname>{getAccountName(account.is)}</accountname>       
\end_layout

\begin_layout LyX-Code
      <date>{edate}</date>       
\end_layout

\begin_layout LyX-Code
      <description>{description.is}</description>       
\end_layout

\begin_layout LyX-Code
      <amount>{amount.is.toString}</amount>       
\end_layout

\begin_layout LyX-Code
      <tags>{showXMLTags}</tags>      
\end_layout

\begin_layout LyX-Code
    </expense>     
\end_layout

\begin_layout LyX-Code
  </entry>   
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
  
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And we'll have to modify the dispatch rules to add a format selection in
 the URI.
 We'll leave plain XML as the default response, and we'll add a way to select
 JSON, XML or Atom.
\end_layout

\begin_layout Standard
The URIs for GET will now be:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code
http://www.pocketchangeapp.com/api/expense/<eid>
\end_layout

\begin_layout LyX-Code
http://www.pocketchangeapp.com/api/expense/<eid>/xml
\end_layout

\begin_layout LyX-Code
http://www.pocketchangeapp.com/api/expense/<eid>/atom
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And the additions to the dispatch are as follows:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code
object RestAPI extends XMLApiHelper {
\end_layout

\begin_layout LyX-Code
  def dispatch: LiftRules.DispatchPF = {     
\end_layout

\begin_layout LyX-Code
    case Req("api" :: "expense" :: eid :: Nil, "", GetRequest) => () =>
 showExpenseXml(eid) // old
\end_layout

\begin_layout LyX-Code
    case Req("api" :: "expense" :: eid :: 
\begin_inset Quotes eld
\end_inset

xml
\begin_inset Quotes erd
\end_inset

 :: Nil, "", GetRequest) => () => showExpenseXml(eid) // new
\end_layout

\begin_layout LyX-Code
    case Req("api" :: "expense" :: eid :: 
\begin_inset Quotes eld
\end_inset

atom
\begin_inset Quotes erd
\end_inset

 :: Nil, "", GetRequest) => () => showExpenseAtom(eid) // new
\end_layout

\begin_layout LyX-Code
    case r @ Req("api" :: "expense" :: eid :: Nil, "", PutRequest) => ()
 => addExpense(eid, r)
\end_layout

\begin_layout LyX-Code
    
\end_layout

\begin_layout LyX-Code
    // Invalid API request - route to our error handler
\end_layout

\begin_layout LyX-Code
    case Req("api" :: x :: Nil, "", _) => failure _ 
\end_layout

\begin_layout LyX-Code
  }
\end_layout

\begin_layout LyX-Code
}
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
Finally, we'll add showExpenseAtom, and rename showExpense to showExpenseXml:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code
def showExpenseXml(eid: String): LiftResponse = {     
\end_layout

\begin_layout LyX-Code
  val e: Box[NodeSeq] = for(e <- Expense.find(By(Expense.id, eid.toLong)))
      
\end_layout

\begin_layout LyX-Code
    yield {       
\end_layout

\begin_layout LyX-Code
      XmlResponse(<operation id="show_expense_xml" success="true">{r.toXML}</oper
ation>)     
\end_layout

\begin_layout LyX-Code
    }
\end_layout

\begin_layout LyX-Code
  e    
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
  
\end_layout

\begin_layout LyX-Code
def showExpenseAtom(eid: String): AtomResponse = {     
\end_layout

\begin_layout LyX-Code
  val e: Box[Node] = for(e <- Expense.find(By(Expense.id, eid.toLong))) yield
 {       
\end_layout

\begin_layout LyX-Code
    e.toAtom
\end_layout

\begin_layout LyX-Code
  }     
\end_layout

\begin_layout LyX-Code
  AtomResponse(e.open_!)   
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's take a look at a request for an Atom-ized entry.
\end_layout

\begin_layout Standard
Request:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code
GET - http://localhost:8080/api/expense/10/atom
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Headers and Response:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code
Expires	Thu, 01 Jan 1970 00:00:00 GMT 
\end_layout

\begin_layout LyX-Code
Set-Cookie	JSESSIONID=1bq219bmoevv1;Path=/ 
\end_layout

\begin_layout LyX-Code
Content-Length	353 
\end_layout

\begin_layout LyX-Code
Content-Type	application/atom+xml 
\end_layout

\begin_layout LyX-Code
X-Lift-Version	
\end_layout

\begin_layout LyX-Code
0.11-SNAPSHOT Server	
\end_layout

\begin_layout LyX-Code
Jetty(6.1.15.rc3)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
<entry xmlns="http://www.w3.org/2005/Atom">     
\end_layout

\begin_layout LyX-Code
<expense>       
\end_layout

\begin_layout LyX-Code
<id>http://www.pocketchangeapp.com/api/expense/10</id>       
\end_layout

\begin_layout LyX-Code
<accountname>Home</accountname>       
\end_layout

\begin_layout LyX-Code
<date>2009-03-26T00:00:00Z</date>       
\end_layout

\begin_layout LyX-Code
<description>I buy food</description>       
\end_layout

\begin_layout LyX-Code
<amount>45.00</amount>       
\end_layout

\begin_layout LyX-Code
<tags>         
\end_layout

\begin_layout LyX-Code
<tag>api</tag>       
\end_layout

\begin_layout LyX-Code
</tags>      
\end_layout

\begin_layout LyX-Code
</expense>     
\end_layout

\begin_layout LyX-Code
</entry>  
\end_layout

\end_inset


\end_layout

\begin_layout Section
Chapter Summary
\end_layout

\begin_layout Standard
We did some awesome stuff and built a simple REST API.
 Some logical extensions would be a full authentication layer or transforming
 the data to a different format.
\end_layout

\end_body
\end_document
